/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UserData implements org.apache.thrift.TBase<UserData, UserData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserData");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField USERTYPECATMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("usertypecatmap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField KNOWN_SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("knownSegments", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField UNKNOWN_SEGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownSegments", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField DMP_AUD_SEG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("dmpAudSegIds", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BIRTHDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("birthdate", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField KNOWN_SEGMENTS_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("knownSegmentsInt", org.apache.thrift.protocol.TType.SET, (short)9);
  private static final org.apache.thrift.protocol.TField UNKNOWN_SEGMENTS_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("unknownSegmentsInt", org.apache.thrift.protocol.TType.SET, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserDataTupleSchemeFactory());
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public byte version; // required
  public Map<AudType,Catlist> usertypecatmap; // optional
  public Set<String> knownSegments; // optional
  public Set<String> unknownSegments; // optional
  public Set<Integer> dmpAudSegIds; // optional
  public String phone; // optional
  public String email; // optional
  public int birthdate; // optional
  public Set<Integer> knownSegmentsInt; // optional
  public Set<Integer> unknownSegmentsInt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Change version whenever there is change in the structure, more specifically when some field is removed.
     * Addition of a field doesn't require changes except for bookkeeping.
     */
    VERSION((short)1, "version"),
    USERTYPECATMAP((short)2, "usertypecatmap"),
    KNOWN_SEGMENTS((short)3, "knownSegments"),
    UNKNOWN_SEGMENTS((short)4, "unknownSegments"),
    DMP_AUD_SEG_IDS((short)5, "dmpAudSegIds"),
    PHONE((short)6, "phone"),
    EMAIL((short)7, "email"),
    BIRTHDATE((short)8, "birthdate"),
    KNOWN_SEGMENTS_INT((short)9, "knownSegmentsInt"),
    UNKNOWN_SEGMENTS_INT((short)10, "unknownSegmentsInt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // USERTYPECATMAP
          return USERTYPECATMAP;
        case 3: // KNOWN_SEGMENTS
          return KNOWN_SEGMENTS;
        case 4: // UNKNOWN_SEGMENTS
          return UNKNOWN_SEGMENTS;
        case 5: // DMP_AUD_SEG_IDS
          return DMP_AUD_SEG_IDS;
        case 6: // PHONE
          return PHONE;
        case 7: // EMAIL
          return EMAIL;
        case 8: // BIRTHDATE
          return BIRTHDATE;
        case 9: // KNOWN_SEGMENTS_INT
          return KNOWN_SEGMENTS_INT;
        case 10: // UNKNOWN_SEGMENTS_INT
          return UNKNOWN_SEGMENTS_INT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __BIRTHDATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USERTYPECATMAP,_Fields.KNOWN_SEGMENTS,_Fields.UNKNOWN_SEGMENTS,_Fields.DMP_AUD_SEG_IDS,_Fields.PHONE,_Fields.EMAIL,_Fields.BIRTHDATE,_Fields.KNOWN_SEGMENTS_INT,_Fields.UNKNOWN_SEGMENTS_INT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.USERTYPECATMAP, new org.apache.thrift.meta_data.FieldMetaData("usertypecatmap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AudType.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Catlist.class))));
    tmpMap.put(_Fields.KNOWN_SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("knownSegments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.UNKNOWN_SEGMENTS, new org.apache.thrift.meta_data.FieldMetaData("unknownSegments", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DMP_AUD_SEG_IDS, new org.apache.thrift.meta_data.FieldMetaData("dmpAudSegIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDATE, new org.apache.thrift.meta_data.FieldMetaData("birthdate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.KNOWN_SEGMENTS_INT, new org.apache.thrift.meta_data.FieldMetaData("knownSegmentsInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UNKNOWN_SEGMENTS_INT, new org.apache.thrift.meta_data.FieldMetaData("unknownSegmentsInt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserData.class, metaDataMap);
  }

  public UserData() {
    this.version = (byte)1;

  }

  public UserData(
    byte version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserData(UserData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetUsertypecatmap()) {
      Map<AudType,Catlist> __this__usertypecatmap = new HashMap<AudType,Catlist>();
      for (Map.Entry<AudType, Catlist> other_element : other.usertypecatmap.entrySet()) {

        AudType other_element_key = other_element.getKey();
        Catlist other_element_value = other_element.getValue();

        AudType __this__usertypecatmap_copy_key = other_element_key;

        Catlist __this__usertypecatmap_copy_value = new Catlist(other_element_value);

        __this__usertypecatmap.put(__this__usertypecatmap_copy_key, __this__usertypecatmap_copy_value);
      }
      this.usertypecatmap = __this__usertypecatmap;
    }
    if (other.isSetKnownSegments()) {
      Set<String> __this__knownSegments = new HashSet<String>();
      for (String other_element : other.knownSegments) {
        __this__knownSegments.add(other_element);
      }
      this.knownSegments = __this__knownSegments;
    }
    if (other.isSetUnknownSegments()) {
      Set<String> __this__unknownSegments = new HashSet<String>();
      for (String other_element : other.unknownSegments) {
        __this__unknownSegments.add(other_element);
      }
      this.unknownSegments = __this__unknownSegments;
    }
    if (other.isSetDmpAudSegIds()) {
      Set<Integer> __this__dmpAudSegIds = new HashSet<Integer>();
      for (Integer other_element : other.dmpAudSegIds) {
        __this__dmpAudSegIds.add(other_element);
      }
      this.dmpAudSegIds = __this__dmpAudSegIds;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    this.birthdate = other.birthdate;
    if (other.isSetKnownSegmentsInt()) {
      Set<Integer> __this__knownSegmentsInt = new HashSet<Integer>();
      for (Integer other_element : other.knownSegmentsInt) {
        __this__knownSegmentsInt.add(other_element);
      }
      this.knownSegmentsInt = __this__knownSegmentsInt;
    }
    if (other.isSetUnknownSegmentsInt()) {
      Set<Integer> __this__unknownSegmentsInt = new HashSet<Integer>();
      for (Integer other_element : other.unknownSegmentsInt) {
        __this__unknownSegmentsInt.add(other_element);
      }
      this.unknownSegmentsInt = __this__unknownSegmentsInt;
    }
  }

  public UserData deepCopy() {
    return new UserData(this);
  }

  @Override
  public void clear() {
    this.version = (byte)1;

    this.usertypecatmap = null;
    this.knownSegments = null;
    this.unknownSegments = null;
    this.dmpAudSegIds = null;
    this.phone = null;
    this.email = null;
    setBirthdateIsSet(false);
    this.birthdate = 0;
    this.knownSegmentsInt = null;
    this.unknownSegmentsInt = null;
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public byte getVersion() {
    return this.version;
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public UserData setVersion(byte version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getUsertypecatmapSize() {
    return (this.usertypecatmap == null) ? 0 : this.usertypecatmap.size();
  }

  public void putToUsertypecatmap(AudType key, Catlist val) {
    if (this.usertypecatmap == null) {
      this.usertypecatmap = new HashMap<AudType,Catlist>();
    }
    this.usertypecatmap.put(key, val);
  }

  public Map<AudType,Catlist> getUsertypecatmap() {
    return this.usertypecatmap;
  }

  public UserData setUsertypecatmap(Map<AudType,Catlist> usertypecatmap) {
    this.usertypecatmap = usertypecatmap;
    return this;
  }

  public void unsetUsertypecatmap() {
    this.usertypecatmap = null;
  }

  /** Returns true if field usertypecatmap is set (has been assigned a value) and false otherwise */
  public boolean isSetUsertypecatmap() {
    return this.usertypecatmap != null;
  }

  public void setUsertypecatmapIsSet(boolean value) {
    if (!value) {
      this.usertypecatmap = null;
    }
  }

  public int getKnownSegmentsSize() {
    return (this.knownSegments == null) ? 0 : this.knownSegments.size();
  }

  public java.util.Iterator<String> getKnownSegmentsIterator() {
    return (this.knownSegments == null) ? null : this.knownSegments.iterator();
  }

  public void addToKnownSegments(String elem) {
    if (this.knownSegments == null) {
      this.knownSegments = new HashSet<String>();
    }
    this.knownSegments.add(elem);
  }

  public Set<String> getKnownSegments() {
    return this.knownSegments;
  }

  public UserData setKnownSegments(Set<String> knownSegments) {
    this.knownSegments = knownSegments;
    return this;
  }

  public void unsetKnownSegments() {
    this.knownSegments = null;
  }

  /** Returns true if field knownSegments is set (has been assigned a value) and false otherwise */
  public boolean isSetKnownSegments() {
    return this.knownSegments != null;
  }

  public void setKnownSegmentsIsSet(boolean value) {
    if (!value) {
      this.knownSegments = null;
    }
  }

  public int getUnknownSegmentsSize() {
    return (this.unknownSegments == null) ? 0 : this.unknownSegments.size();
  }

  public java.util.Iterator<String> getUnknownSegmentsIterator() {
    return (this.unknownSegments == null) ? null : this.unknownSegments.iterator();
  }

  public void addToUnknownSegments(String elem) {
    if (this.unknownSegments == null) {
      this.unknownSegments = new HashSet<String>();
    }
    this.unknownSegments.add(elem);
  }

  public Set<String> getUnknownSegments() {
    return this.unknownSegments;
  }

  public UserData setUnknownSegments(Set<String> unknownSegments) {
    this.unknownSegments = unknownSegments;
    return this;
  }

  public void unsetUnknownSegments() {
    this.unknownSegments = null;
  }

  /** Returns true if field unknownSegments is set (has been assigned a value) and false otherwise */
  public boolean isSetUnknownSegments() {
    return this.unknownSegments != null;
  }

  public void setUnknownSegmentsIsSet(boolean value) {
    if (!value) {
      this.unknownSegments = null;
    }
  }

  public int getDmpAudSegIdsSize() {
    return (this.dmpAudSegIds == null) ? 0 : this.dmpAudSegIds.size();
  }

  public java.util.Iterator<Integer> getDmpAudSegIdsIterator() {
    return (this.dmpAudSegIds == null) ? null : this.dmpAudSegIds.iterator();
  }

  public void addToDmpAudSegIds(int elem) {
    if (this.dmpAudSegIds == null) {
      this.dmpAudSegIds = new HashSet<Integer>();
    }
    this.dmpAudSegIds.add(elem);
  }

  public Set<Integer> getDmpAudSegIds() {
    return this.dmpAudSegIds;
  }

  public UserData setDmpAudSegIds(Set<Integer> dmpAudSegIds) {
    this.dmpAudSegIds = dmpAudSegIds;
    return this;
  }

  public void unsetDmpAudSegIds() {
    this.dmpAudSegIds = null;
  }

  /** Returns true if field dmpAudSegIds is set (has been assigned a value) and false otherwise */
  public boolean isSetDmpAudSegIds() {
    return this.dmpAudSegIds != null;
  }

  public void setDmpAudSegIdsIsSet(boolean value) {
    if (!value) {
      this.dmpAudSegIds = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public UserData setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public UserData setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public int getBirthdate() {
    return this.birthdate;
  }

  public UserData setBirthdate(int birthdate) {
    this.birthdate = birthdate;
    setBirthdateIsSet(true);
    return this;
  }

  public void unsetBirthdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIRTHDATE_ISSET_ID);
  }

  /** Returns true if field birthdate is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthdate() {
    return EncodingUtils.testBit(__isset_bitfield, __BIRTHDATE_ISSET_ID);
  }

  public void setBirthdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIRTHDATE_ISSET_ID, value);
  }

  public int getKnownSegmentsIntSize() {
    return (this.knownSegmentsInt == null) ? 0 : this.knownSegmentsInt.size();
  }

  public java.util.Iterator<Integer> getKnownSegmentsIntIterator() {
    return (this.knownSegmentsInt == null) ? null : this.knownSegmentsInt.iterator();
  }

  public void addToKnownSegmentsInt(int elem) {
    if (this.knownSegmentsInt == null) {
      this.knownSegmentsInt = new HashSet<Integer>();
    }
    this.knownSegmentsInt.add(elem);
  }

  public Set<Integer> getKnownSegmentsInt() {
    return this.knownSegmentsInt;
  }

  public UserData setKnownSegmentsInt(Set<Integer> knownSegmentsInt) {
    this.knownSegmentsInt = knownSegmentsInt;
    return this;
  }

  public void unsetKnownSegmentsInt() {
    this.knownSegmentsInt = null;
  }

  /** Returns true if field knownSegmentsInt is set (has been assigned a value) and false otherwise */
  public boolean isSetKnownSegmentsInt() {
    return this.knownSegmentsInt != null;
  }

  public void setKnownSegmentsIntIsSet(boolean value) {
    if (!value) {
      this.knownSegmentsInt = null;
    }
  }

  public int getUnknownSegmentsIntSize() {
    return (this.unknownSegmentsInt == null) ? 0 : this.unknownSegmentsInt.size();
  }

  public java.util.Iterator<Integer> getUnknownSegmentsIntIterator() {
    return (this.unknownSegmentsInt == null) ? null : this.unknownSegmentsInt.iterator();
  }

  public void addToUnknownSegmentsInt(int elem) {
    if (this.unknownSegmentsInt == null) {
      this.unknownSegmentsInt = new HashSet<Integer>();
    }
    this.unknownSegmentsInt.add(elem);
  }

  public Set<Integer> getUnknownSegmentsInt() {
    return this.unknownSegmentsInt;
  }

  public UserData setUnknownSegmentsInt(Set<Integer> unknownSegmentsInt) {
    this.unknownSegmentsInt = unknownSegmentsInt;
    return this;
  }

  public void unsetUnknownSegmentsInt() {
    this.unknownSegmentsInt = null;
  }

  /** Returns true if field unknownSegmentsInt is set (has been assigned a value) and false otherwise */
  public boolean isSetUnknownSegmentsInt() {
    return this.unknownSegmentsInt != null;
  }

  public void setUnknownSegmentsIntIsSet(boolean value) {
    if (!value) {
      this.unknownSegmentsInt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Byte)value);
      }
      break;

    case USERTYPECATMAP:
      if (value == null) {
        unsetUsertypecatmap();
      } else {
        setUsertypecatmap((Map<AudType,Catlist>)value);
      }
      break;

    case KNOWN_SEGMENTS:
      if (value == null) {
        unsetKnownSegments();
      } else {
        setKnownSegments((Set<String>)value);
      }
      break;

    case UNKNOWN_SEGMENTS:
      if (value == null) {
        unsetUnknownSegments();
      } else {
        setUnknownSegments((Set<String>)value);
      }
      break;

    case DMP_AUD_SEG_IDS:
      if (value == null) {
        unsetDmpAudSegIds();
      } else {
        setDmpAudSegIds((Set<Integer>)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case BIRTHDATE:
      if (value == null) {
        unsetBirthdate();
      } else {
        setBirthdate((Integer)value);
      }
      break;

    case KNOWN_SEGMENTS_INT:
      if (value == null) {
        unsetKnownSegmentsInt();
      } else {
        setKnownSegmentsInt((Set<Integer>)value);
      }
      break;

    case UNKNOWN_SEGMENTS_INT:
      if (value == null) {
        unsetUnknownSegmentsInt();
      } else {
        setUnknownSegmentsInt((Set<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Byte.valueOf(getVersion());

    case USERTYPECATMAP:
      return getUsertypecatmap();

    case KNOWN_SEGMENTS:
      return getKnownSegments();

    case UNKNOWN_SEGMENTS:
      return getUnknownSegments();

    case DMP_AUD_SEG_IDS:
      return getDmpAudSegIds();

    case PHONE:
      return getPhone();

    case EMAIL:
      return getEmail();

    case BIRTHDATE:
      return Integer.valueOf(getBirthdate());

    case KNOWN_SEGMENTS_INT:
      return getKnownSegmentsInt();

    case UNKNOWN_SEGMENTS_INT:
      return getUnknownSegmentsInt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case USERTYPECATMAP:
      return isSetUsertypecatmap();
    case KNOWN_SEGMENTS:
      return isSetKnownSegments();
    case UNKNOWN_SEGMENTS:
      return isSetUnknownSegments();
    case DMP_AUD_SEG_IDS:
      return isSetDmpAudSegIds();
    case PHONE:
      return isSetPhone();
    case EMAIL:
      return isSetEmail();
    case BIRTHDATE:
      return isSetBirthdate();
    case KNOWN_SEGMENTS_INT:
      return isSetKnownSegmentsInt();
    case UNKNOWN_SEGMENTS_INT:
      return isSetUnknownSegmentsInt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserData)
      return this.equals((UserData)that);
    return false;
  }

  public boolean equals(UserData that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_usertypecatmap = true && this.isSetUsertypecatmap();
    boolean that_present_usertypecatmap = true && that.isSetUsertypecatmap();
    if (this_present_usertypecatmap || that_present_usertypecatmap) {
      if (!(this_present_usertypecatmap && that_present_usertypecatmap))
        return false;
      if (!this.usertypecatmap.equals(that.usertypecatmap))
        return false;
    }

    boolean this_present_knownSegments = true && this.isSetKnownSegments();
    boolean that_present_knownSegments = true && that.isSetKnownSegments();
    if (this_present_knownSegments || that_present_knownSegments) {
      if (!(this_present_knownSegments && that_present_knownSegments))
        return false;
      if (!this.knownSegments.equals(that.knownSegments))
        return false;
    }

    boolean this_present_unknownSegments = true && this.isSetUnknownSegments();
    boolean that_present_unknownSegments = true && that.isSetUnknownSegments();
    if (this_present_unknownSegments || that_present_unknownSegments) {
      if (!(this_present_unknownSegments && that_present_unknownSegments))
        return false;
      if (!this.unknownSegments.equals(that.unknownSegments))
        return false;
    }

    boolean this_present_dmpAudSegIds = true && this.isSetDmpAudSegIds();
    boolean that_present_dmpAudSegIds = true && that.isSetDmpAudSegIds();
    if (this_present_dmpAudSegIds || that_present_dmpAudSegIds) {
      if (!(this_present_dmpAudSegIds && that_present_dmpAudSegIds))
        return false;
      if (!this.dmpAudSegIds.equals(that.dmpAudSegIds))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_birthdate = true && this.isSetBirthdate();
    boolean that_present_birthdate = true && that.isSetBirthdate();
    if (this_present_birthdate || that_present_birthdate) {
      if (!(this_present_birthdate && that_present_birthdate))
        return false;
      if (this.birthdate != that.birthdate)
        return false;
    }

    boolean this_present_knownSegmentsInt = true && this.isSetKnownSegmentsInt();
    boolean that_present_knownSegmentsInt = true && that.isSetKnownSegmentsInt();
    if (this_present_knownSegmentsInt || that_present_knownSegmentsInt) {
      if (!(this_present_knownSegmentsInt && that_present_knownSegmentsInt))
        return false;
      if (!this.knownSegmentsInt.equals(that.knownSegmentsInt))
        return false;
    }

    boolean this_present_unknownSegmentsInt = true && this.isSetUnknownSegmentsInt();
    boolean that_present_unknownSegmentsInt = true && that.isSetUnknownSegmentsInt();
    if (this_present_unknownSegmentsInt || that_present_unknownSegmentsInt) {
      if (!(this_present_unknownSegmentsInt && that_present_unknownSegmentsInt))
        return false;
      if (!this.unknownSegmentsInt.equals(that.unknownSegmentsInt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_usertypecatmap = true && (isSetUsertypecatmap());
    builder.append(present_usertypecatmap);
    if (present_usertypecatmap)
      builder.append(usertypecatmap);

    boolean present_knownSegments = true && (isSetKnownSegments());
    builder.append(present_knownSegments);
    if (present_knownSegments)
      builder.append(knownSegments);

    boolean present_unknownSegments = true && (isSetUnknownSegments());
    builder.append(present_unknownSegments);
    if (present_unknownSegments)
      builder.append(unknownSegments);

    boolean present_dmpAudSegIds = true && (isSetDmpAudSegIds());
    builder.append(present_dmpAudSegIds);
    if (present_dmpAudSegIds)
      builder.append(dmpAudSegIds);

    boolean present_phone = true && (isSetPhone());
    builder.append(present_phone);
    if (present_phone)
      builder.append(phone);

    boolean present_email = true && (isSetEmail());
    builder.append(present_email);
    if (present_email)
      builder.append(email);

    boolean present_birthdate = true && (isSetBirthdate());
    builder.append(present_birthdate);
    if (present_birthdate)
      builder.append(birthdate);

    boolean present_knownSegmentsInt = true && (isSetKnownSegmentsInt());
    builder.append(present_knownSegmentsInt);
    if (present_knownSegmentsInt)
      builder.append(knownSegmentsInt);

    boolean present_unknownSegmentsInt = true && (isSetUnknownSegmentsInt());
    builder.append(present_unknownSegmentsInt);
    if (present_unknownSegmentsInt)
      builder.append(unknownSegmentsInt);

    return builder.toHashCode();
  }

  public int compareTo(UserData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserData typedOther = (UserData)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsertypecatmap()).compareTo(typedOther.isSetUsertypecatmap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsertypecatmap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usertypecatmap, typedOther.usertypecatmap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnownSegments()).compareTo(typedOther.isSetKnownSegments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnownSegments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knownSegments, typedOther.knownSegments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnknownSegments()).compareTo(typedOther.isSetUnknownSegments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnknownSegments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownSegments, typedOther.unknownSegments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDmpAudSegIds()).compareTo(typedOther.isSetDmpAudSegIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmpAudSegIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmpAudSegIds, typedOther.dmpAudSegIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, typedOther.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(typedOther.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, typedOther.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthdate()).compareTo(typedOther.isSetBirthdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthdate, typedOther.birthdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKnownSegmentsInt()).compareTo(typedOther.isSetKnownSegmentsInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKnownSegmentsInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.knownSegmentsInt, typedOther.knownSegmentsInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnknownSegmentsInt()).compareTo(typedOther.isSetUnknownSegmentsInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnknownSegmentsInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknownSegmentsInt, typedOther.unknownSegmentsInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserData(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetUsertypecatmap()) {
      if (!first) sb.append(", ");
      sb.append("usertypecatmap:");
      if (this.usertypecatmap == null) {
        sb.append("null");
      } else {
        sb.append(this.usertypecatmap);
      }
      first = false;
    }
    if (isSetKnownSegments()) {
      if (!first) sb.append(", ");
      sb.append("knownSegments:");
      if (this.knownSegments == null) {
        sb.append("null");
      } else {
        sb.append(this.knownSegments);
      }
      first = false;
    }
    if (isSetUnknownSegments()) {
      if (!first) sb.append(", ");
      sb.append("unknownSegments:");
      if (this.unknownSegments == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownSegments);
      }
      first = false;
    }
    if (isSetDmpAudSegIds()) {
      if (!first) sb.append(", ");
      sb.append("dmpAudSegIds:");
      if (this.dmpAudSegIds == null) {
        sb.append("null");
      } else {
        sb.append(this.dmpAudSegIds);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetBirthdate()) {
      if (!first) sb.append(", ");
      sb.append("birthdate:");
      sb.append(this.birthdate);
      first = false;
    }
    if (isSetKnownSegmentsInt()) {
      if (!first) sb.append(", ");
      sb.append("knownSegmentsInt:");
      if (this.knownSegmentsInt == null) {
        sb.append("null");
      } else {
        sb.append(this.knownSegmentsInt);
      }
      first = false;
    }
    if (isSetUnknownSegmentsInt()) {
      if (!first) sb.append(", ");
      sb.append("unknownSegmentsInt:");
      if (this.unknownSegmentsInt == null) {
        sb.append("null");
      } else {
        sb.append(this.unknownSegmentsInt);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserDataStandardSchemeFactory implements SchemeFactory {
    public UserDataStandardScheme getScheme() {
      return new UserDataStandardScheme();
    }
  }

  private static class UserDataStandardScheme extends StandardScheme<UserData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.version = iprot.readByte();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERTYPECATMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.usertypecatmap = new HashMap<AudType,Catlist>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  AudType _key10; // required
                  Catlist _val11; // required
                  _key10 = AudType.findByValue(iprot.readI32());
                  _val11 = new Catlist();
                  _val11.read(iprot);
                  struct.usertypecatmap.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setUsertypecatmapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KNOWN_SEGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.knownSegments = new HashSet<String>(2*_set12.size);
                for (int _i13 = 0; _i13 < _set12.size; ++_i13)
                {
                  String _elem14; // required
                  _elem14 = iprot.readString();
                  struct.knownSegments.add(_elem14);
                }
                iprot.readSetEnd();
              }
              struct.setKnownSegmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNKNOWN_SEGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.unknownSegments = new HashSet<String>(2*_set15.size);
                for (int _i16 = 0; _i16 < _set15.size; ++_i16)
                {
                  String _elem17; // required
                  _elem17 = iprot.readString();
                  struct.unknownSegments.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setUnknownSegmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DMP_AUD_SEG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set18 = iprot.readSetBegin();
                struct.dmpAudSegIds = new HashSet<Integer>(2*_set18.size);
                for (int _i19 = 0; _i19 < _set18.size; ++_i19)
                {
                  int _elem20; // required
                  _elem20 = iprot.readI32();
                  struct.dmpAudSegIds.add(_elem20);
                }
                iprot.readSetEnd();
              }
              struct.setDmpAudSegIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BIRTHDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.birthdate = iprot.readI32();
              struct.setBirthdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // KNOWN_SEGMENTS_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set21 = iprot.readSetBegin();
                struct.knownSegmentsInt = new HashSet<Integer>(2*_set21.size);
                for (int _i22 = 0; _i22 < _set21.size; ++_i22)
                {
                  int _elem23; // required
                  _elem23 = iprot.readI32();
                  struct.knownSegmentsInt.add(_elem23);
                }
                iprot.readSetEnd();
              }
              struct.setKnownSegmentsIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UNKNOWN_SEGMENTS_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.unknownSegmentsInt = new HashSet<Integer>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  int _elem26; // required
                  _elem26 = iprot.readI32();
                  struct.unknownSegmentsInt.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setUnknownSegmentsIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeByte(struct.version);
      oprot.writeFieldEnd();
      if (struct.usertypecatmap != null) {
        if (struct.isSetUsertypecatmap()) {
          oprot.writeFieldBegin(USERTYPECATMAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.usertypecatmap.size()));
            for (Map.Entry<AudType, Catlist> _iter27 : struct.usertypecatmap.entrySet())
            {
              oprot.writeI32(_iter27.getKey().getValue());
              _iter27.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.knownSegments != null) {
        if (struct.isSetKnownSegments()) {
          oprot.writeFieldBegin(KNOWN_SEGMENTS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.knownSegments.size()));
            for (String _iter28 : struct.knownSegments)
            {
              oprot.writeString(_iter28);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unknownSegments != null) {
        if (struct.isSetUnknownSegments()) {
          oprot.writeFieldBegin(UNKNOWN_SEGMENTS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.unknownSegments.size()));
            for (String _iter29 : struct.unknownSegments)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dmpAudSegIds != null) {
        if (struct.isSetDmpAudSegIds()) {
          oprot.writeFieldBegin(DMP_AUD_SEG_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.dmpAudSegIds.size()));
            for (int _iter30 : struct.dmpAudSegIds)
            {
              oprot.writeI32(_iter30);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBirthdate()) {
        oprot.writeFieldBegin(BIRTHDATE_FIELD_DESC);
        oprot.writeI32(struct.birthdate);
        oprot.writeFieldEnd();
      }
      if (struct.knownSegmentsInt != null) {
        if (struct.isSetKnownSegmentsInt()) {
          oprot.writeFieldBegin(KNOWN_SEGMENTS_INT_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.knownSegmentsInt.size()));
            for (int _iter31 : struct.knownSegmentsInt)
            {
              oprot.writeI32(_iter31);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.unknownSegmentsInt != null) {
        if (struct.isSetUnknownSegmentsInt()) {
          oprot.writeFieldBegin(UNKNOWN_SEGMENTS_INT_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.unknownSegmentsInt.size()));
            for (int _iter32 : struct.unknownSegmentsInt)
            {
              oprot.writeI32(_iter32);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserDataTupleSchemeFactory implements SchemeFactory {
    public UserDataTupleScheme getScheme() {
      return new UserDataTupleScheme();
    }
  }

  private static class UserDataTupleScheme extends TupleScheme<UserData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetUsertypecatmap()) {
        optionals.set(1);
      }
      if (struct.isSetKnownSegments()) {
        optionals.set(2);
      }
      if (struct.isSetUnknownSegments()) {
        optionals.set(3);
      }
      if (struct.isSetDmpAudSegIds()) {
        optionals.set(4);
      }
      if (struct.isSetPhone()) {
        optionals.set(5);
      }
      if (struct.isSetEmail()) {
        optionals.set(6);
      }
      if (struct.isSetBirthdate()) {
        optionals.set(7);
      }
      if (struct.isSetKnownSegmentsInt()) {
        optionals.set(8);
      }
      if (struct.isSetUnknownSegmentsInt()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetVersion()) {
        oprot.writeByte(struct.version);
      }
      if (struct.isSetUsertypecatmap()) {
        {
          oprot.writeI32(struct.usertypecatmap.size());
          for (Map.Entry<AudType, Catlist> _iter33 : struct.usertypecatmap.entrySet())
          {
            oprot.writeI32(_iter33.getKey().getValue());
            _iter33.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetKnownSegments()) {
        {
          oprot.writeI32(struct.knownSegments.size());
          for (String _iter34 : struct.knownSegments)
          {
            oprot.writeString(_iter34);
          }
        }
      }
      if (struct.isSetUnknownSegments()) {
        {
          oprot.writeI32(struct.unknownSegments.size());
          for (String _iter35 : struct.unknownSegments)
          {
            oprot.writeString(_iter35);
          }
        }
      }
      if (struct.isSetDmpAudSegIds()) {
        {
          oprot.writeI32(struct.dmpAudSegIds.size());
          for (int _iter36 : struct.dmpAudSegIds)
          {
            oprot.writeI32(_iter36);
          }
        }
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetBirthdate()) {
        oprot.writeI32(struct.birthdate);
      }
      if (struct.isSetKnownSegmentsInt()) {
        {
          oprot.writeI32(struct.knownSegmentsInt.size());
          for (int _iter37 : struct.knownSegmentsInt)
          {
            oprot.writeI32(_iter37);
          }
        }
      }
      if (struct.isSetUnknownSegmentsInt()) {
        {
          oprot.writeI32(struct.unknownSegmentsInt.size());
          for (int _iter38 : struct.unknownSegmentsInt)
          {
            oprot.writeI32(_iter38);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.version = iprot.readByte();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map39 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.usertypecatmap = new HashMap<AudType,Catlist>(2*_map39.size);
          for (int _i40 = 0; _i40 < _map39.size; ++_i40)
          {
            AudType _key41; // required
            Catlist _val42; // required
            _key41 = AudType.findByValue(iprot.readI32());
            _val42 = new Catlist();
            _val42.read(iprot);
            struct.usertypecatmap.put(_key41, _val42);
          }
        }
        struct.setUsertypecatmapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set43 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.knownSegments = new HashSet<String>(2*_set43.size);
          for (int _i44 = 0; _i44 < _set43.size; ++_i44)
          {
            String _elem45; // required
            _elem45 = iprot.readString();
            struct.knownSegments.add(_elem45);
          }
        }
        struct.setKnownSegmentsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set46 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.unknownSegments = new HashSet<String>(2*_set46.size);
          for (int _i47 = 0; _i47 < _set46.size; ++_i47)
          {
            String _elem48; // required
            _elem48 = iprot.readString();
            struct.unknownSegments.add(_elem48);
          }
        }
        struct.setUnknownSegmentsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set49 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.dmpAudSegIds = new HashSet<Integer>(2*_set49.size);
          for (int _i50 = 0; _i50 < _set49.size; ++_i50)
          {
            int _elem51; // required
            _elem51 = iprot.readI32();
            struct.dmpAudSegIds.add(_elem51);
          }
        }
        struct.setDmpAudSegIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(6)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(7)) {
        struct.birthdate = iprot.readI32();
        struct.setBirthdateIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set52 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.knownSegmentsInt = new HashSet<Integer>(2*_set52.size);
          for (int _i53 = 0; _i53 < _set52.size; ++_i53)
          {
            int _elem54; // required
            _elem54 = iprot.readI32();
            struct.knownSegmentsInt.add(_elem54);
          }
        }
        struct.setKnownSegmentsIntIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set55 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.unknownSegmentsInt = new HashSet<Integer>(2*_set55.size);
          for (int _i56 = 0; _i56 < _set55.size; ++_i56)
          {
            int _elem57; // required
            _elem57 = iprot.readI32();
            struct.unknownSegmentsInt.add(_elem57);
          }
        }
        struct.setUnknownSegmentsIntIsSet(true);
      }
    }
  }

}

