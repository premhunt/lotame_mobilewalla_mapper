/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.adserving.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This is impression object.
 */
public class Impression implements org.apache.thrift.TBase<Impression, Impression._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Impression");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField IMPRESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("impressionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("creativeId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ADVERTISER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("advertiserId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BID_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidValue", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SLOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("slotId", org.apache.thrift.protocol.TType.I16, (short)8);
  private static final org.apache.thrift.protocol.TField ADV_INC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adv_inc_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PREDICTED_CTR_FIELD_DESC = new org.apache.thrift.protocol.TField("predictedCTR", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField MARKETPLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("marketplace", org.apache.thrift.protocol.TType.I16, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImpressionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImpressionTupleSchemeFactory());
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public int version; // required
  public String impressionId; // optional
  public int creativeId; // optional
  public int adId; // optional
  public int campaignId; // optional
  public String advertiserId; // optional
  /**
   * Final bid value that bidder gives for bidding on exchange.
   */
  public double bidValue; // optional
  public short slotId; // optional
  public int adv_inc_id; // optional
  public double predictedCTR; // optional
  public short marketplace; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Change version whenever there is change in the structure, more specifically when some field is removed.
     * Addition of a field doesn't require changes except for bookkeeping.
     */
    VERSION((short)1, "version"),
    IMPRESSION_ID((short)2, "impressionId"),
    CREATIVE_ID((short)3, "creativeId"),
    AD_ID((short)4, "adId"),
    CAMPAIGN_ID((short)5, "campaignId"),
    ADVERTISER_ID((short)6, "advertiserId"),
    /**
     * Final bid value that bidder gives for bidding on exchange.
     */
    BID_VALUE((short)7, "bidValue"),
    SLOT_ID((short)8, "slotId"),
    ADV_INC_ID((short)9, "adv_inc_id"),
    PREDICTED_CTR((short)10, "predictedCTR"),
    MARKETPLACE((short)11, "marketplace");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // IMPRESSION_ID
          return IMPRESSION_ID;
        case 3: // CREATIVE_ID
          return CREATIVE_ID;
        case 4: // AD_ID
          return AD_ID;
        case 5: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 6: // ADVERTISER_ID
          return ADVERTISER_ID;
        case 7: // BID_VALUE
          return BID_VALUE;
        case 8: // SLOT_ID
          return SLOT_ID;
        case 9: // ADV_INC_ID
          return ADV_INC_ID;
        case 10: // PREDICTED_CTR
          return PREDICTED_CTR;
        case 11: // MARKETPLACE
          return MARKETPLACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __CREATIVEID_ISSET_ID = 1;
  private static final int __ADID_ISSET_ID = 2;
  private static final int __CAMPAIGNID_ISSET_ID = 3;
  private static final int __BIDVALUE_ISSET_ID = 4;
  private static final int __SLOTID_ISSET_ID = 5;
  private static final int __ADV_INC_ID_ISSET_ID = 6;
  private static final int __PREDICTEDCTR_ISSET_ID = 7;
  private static final int __MARKETPLACE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IMPRESSION_ID,_Fields.CREATIVE_ID,_Fields.AD_ID,_Fields.CAMPAIGN_ID,_Fields.ADVERTISER_ID,_Fields.BID_VALUE,_Fields.SLOT_ID,_Fields.ADV_INC_ID,_Fields.PREDICTED_CTR,_Fields.MARKETPLACE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMPRESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("impressionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("creativeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ADVERTISER_ID, new org.apache.thrift.meta_data.FieldMetaData("advertiserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BID_VALUE, new org.apache.thrift.meta_data.FieldMetaData("bidValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SLOT_ID, new org.apache.thrift.meta_data.FieldMetaData("slotId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ADV_INC_ID, new org.apache.thrift.meta_data.FieldMetaData("adv_inc_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PREDICTED_CTR, new org.apache.thrift.meta_data.FieldMetaData("predictedCTR", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARKETPLACE, new org.apache.thrift.meta_data.FieldMetaData("marketplace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Impression.class, metaDataMap);
  }

  public Impression() {
    this.version = 1;

  }

  public Impression(
    int version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Impression(Impression other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetImpressionId()) {
      this.impressionId = other.impressionId;
    }
    this.creativeId = other.creativeId;
    this.adId = other.adId;
    this.campaignId = other.campaignId;
    if (other.isSetAdvertiserId()) {
      this.advertiserId = other.advertiserId;
    }
    this.bidValue = other.bidValue;
    this.slotId = other.slotId;
    this.adv_inc_id = other.adv_inc_id;
    this.predictedCTR = other.predictedCTR;
    this.marketplace = other.marketplace;
  }

  public Impression deepCopy() {
    return new Impression(this);
  }

  @Override
  public void clear() {
    this.version = 1;

    this.impressionId = null;
    setCreativeIdIsSet(false);
    this.creativeId = 0;
    setAdIdIsSet(false);
    this.adId = 0;
    setCampaignIdIsSet(false);
    this.campaignId = 0;
    this.advertiserId = null;
    setBidValueIsSet(false);
    this.bidValue = 0.0;
    setSlotIdIsSet(false);
    this.slotId = 0;
    setAdv_inc_idIsSet(false);
    this.adv_inc_id = 0;
    setPredictedCTRIsSet(false);
    this.predictedCTR = 0.0;
    setMarketplaceIsSet(false);
    this.marketplace = 0;
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public int getVersion() {
    return this.version;
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public Impression setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getImpressionId() {
    return this.impressionId;
  }

  public Impression setImpressionId(String impressionId) {
    this.impressionId = impressionId;
    return this;
  }

  public void unsetImpressionId() {
    this.impressionId = null;
  }

  /** Returns true if field impressionId is set (has been assigned a value) and false otherwise */
  public boolean isSetImpressionId() {
    return this.impressionId != null;
  }

  public void setImpressionIdIsSet(boolean value) {
    if (!value) {
      this.impressionId = null;
    }
  }

  public int getCreativeId() {
    return this.creativeId;
  }

  public Impression setCreativeId(int creativeId) {
    this.creativeId = creativeId;
    setCreativeIdIsSet(true);
    return this;
  }

  public void unsetCreativeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  /** Returns true if field creativeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreativeId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATIVEID_ISSET_ID);
  }

  public void setCreativeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATIVEID_ISSET_ID, value);
  }

  public int getAdId() {
    return this.adId;
  }

  public Impression setAdId(int adId) {
    this.adId = adId;
    setAdIdIsSet(true);
    return this;
  }

  public void unsetAdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public int getCampaignId() {
    return this.campaignId;
  }

  public Impression setCampaignId(int campaignId) {
    this.campaignId = campaignId;
    setCampaignIdIsSet(true);
    return this;
  }

  public void unsetCampaignId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignId is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignId() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public String getAdvertiserId() {
    return this.advertiserId;
  }

  public Impression setAdvertiserId(String advertiserId) {
    this.advertiserId = advertiserId;
    return this;
  }

  public void unsetAdvertiserId() {
    this.advertiserId = null;
  }

  /** Returns true if field advertiserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvertiserId() {
    return this.advertiserId != null;
  }

  public void setAdvertiserIdIsSet(boolean value) {
    if (!value) {
      this.advertiserId = null;
    }
  }

  /**
   * Final bid value that bidder gives for bidding on exchange.
   */
  public double getBidValue() {
    return this.bidValue;
  }

  /**
   * Final bid value that bidder gives for bidding on exchange.
   */
  public Impression setBidValue(double bidValue) {
    this.bidValue = bidValue;
    setBidValueIsSet(true);
    return this;
  }

  public void unsetBidValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIDVALUE_ISSET_ID);
  }

  /** Returns true if field bidValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBidValue() {
    return EncodingUtils.testBit(__isset_bitfield, __BIDVALUE_ISSET_ID);
  }

  public void setBidValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIDVALUE_ISSET_ID, value);
  }

  public short getSlotId() {
    return this.slotId;
  }

  public Impression setSlotId(short slotId) {
    this.slotId = slotId;
    setSlotIdIsSet(true);
    return this;
  }

  public void unsetSlotId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLOTID_ISSET_ID);
  }

  /** Returns true if field slotId is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLOTID_ISSET_ID);
  }

  public void setSlotIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLOTID_ISSET_ID, value);
  }

  public int getAdv_inc_id() {
    return this.adv_inc_id;
  }

  public Impression setAdv_inc_id(int adv_inc_id) {
    this.adv_inc_id = adv_inc_id;
    setAdv_inc_idIsSet(true);
    return this;
  }

  public void unsetAdv_inc_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADV_INC_ID_ISSET_ID);
  }

  /** Returns true if field adv_inc_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAdv_inc_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ADV_INC_ID_ISSET_ID);
  }

  public void setAdv_inc_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADV_INC_ID_ISSET_ID, value);
  }

  public double getPredictedCTR() {
    return this.predictedCTR;
  }

  public Impression setPredictedCTR(double predictedCTR) {
    this.predictedCTR = predictedCTR;
    setPredictedCTRIsSet(true);
    return this;
  }

  public void unsetPredictedCTR() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREDICTEDCTR_ISSET_ID);
  }

  /** Returns true if field predictedCTR is set (has been assigned a value) and false otherwise */
  public boolean isSetPredictedCTR() {
    return EncodingUtils.testBit(__isset_bitfield, __PREDICTEDCTR_ISSET_ID);
  }

  public void setPredictedCTRIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREDICTEDCTR_ISSET_ID, value);
  }

  public short getMarketplace() {
    return this.marketplace;
  }

  public Impression setMarketplace(short marketplace) {
    this.marketplace = marketplace;
    setMarketplaceIsSet(true);
    return this;
  }

  public void unsetMarketplace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MARKETPLACE_ISSET_ID);
  }

  /** Returns true if field marketplace is set (has been assigned a value) and false otherwise */
  public boolean isSetMarketplace() {
    return EncodingUtils.testBit(__isset_bitfield, __MARKETPLACE_ISSET_ID);
  }

  public void setMarketplaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MARKETPLACE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case IMPRESSION_ID:
      if (value == null) {
        unsetImpressionId();
      } else {
        setImpressionId((String)value);
      }
      break;

    case CREATIVE_ID:
      if (value == null) {
        unsetCreativeId();
      } else {
        setCreativeId((Integer)value);
      }
      break;

    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((Integer)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignId();
      } else {
        setCampaignId((Integer)value);
      }
      break;

    case ADVERTISER_ID:
      if (value == null) {
        unsetAdvertiserId();
      } else {
        setAdvertiserId((String)value);
      }
      break;

    case BID_VALUE:
      if (value == null) {
        unsetBidValue();
      } else {
        setBidValue((Double)value);
      }
      break;

    case SLOT_ID:
      if (value == null) {
        unsetSlotId();
      } else {
        setSlotId((Short)value);
      }
      break;

    case ADV_INC_ID:
      if (value == null) {
        unsetAdv_inc_id();
      } else {
        setAdv_inc_id((Integer)value);
      }
      break;

    case PREDICTED_CTR:
      if (value == null) {
        unsetPredictedCTR();
      } else {
        setPredictedCTR((Double)value);
      }
      break;

    case MARKETPLACE:
      if (value == null) {
        unsetMarketplace();
      } else {
        setMarketplace((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Integer.valueOf(getVersion());

    case IMPRESSION_ID:
      return getImpressionId();

    case CREATIVE_ID:
      return Integer.valueOf(getCreativeId());

    case AD_ID:
      return Integer.valueOf(getAdId());

    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignId());

    case ADVERTISER_ID:
      return getAdvertiserId();

    case BID_VALUE:
      return Double.valueOf(getBidValue());

    case SLOT_ID:
      return Short.valueOf(getSlotId());

    case ADV_INC_ID:
      return Integer.valueOf(getAdv_inc_id());

    case PREDICTED_CTR:
      return Double.valueOf(getPredictedCTR());

    case MARKETPLACE:
      return Short.valueOf(getMarketplace());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case IMPRESSION_ID:
      return isSetImpressionId();
    case CREATIVE_ID:
      return isSetCreativeId();
    case AD_ID:
      return isSetAdId();
    case CAMPAIGN_ID:
      return isSetCampaignId();
    case ADVERTISER_ID:
      return isSetAdvertiserId();
    case BID_VALUE:
      return isSetBidValue();
    case SLOT_ID:
      return isSetSlotId();
    case ADV_INC_ID:
      return isSetAdv_inc_id();
    case PREDICTED_CTR:
      return isSetPredictedCTR();
    case MARKETPLACE:
      return isSetMarketplace();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Impression)
      return this.equals((Impression)that);
    return false;
  }

  public boolean equals(Impression that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_impressionId = true && this.isSetImpressionId();
    boolean that_present_impressionId = true && that.isSetImpressionId();
    if (this_present_impressionId || that_present_impressionId) {
      if (!(this_present_impressionId && that_present_impressionId))
        return false;
      if (!this.impressionId.equals(that.impressionId))
        return false;
    }

    boolean this_present_creativeId = true && this.isSetCreativeId();
    boolean that_present_creativeId = true && that.isSetCreativeId();
    if (this_present_creativeId || that_present_creativeId) {
      if (!(this_present_creativeId && that_present_creativeId))
        return false;
      if (this.creativeId != that.creativeId)
        return false;
    }

    boolean this_present_adId = true && this.isSetAdId();
    boolean that_present_adId = true && that.isSetAdId();
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (this.adId != that.adId)
        return false;
    }

    boolean this_present_campaignId = true && this.isSetCampaignId();
    boolean that_present_campaignId = true && that.isSetCampaignId();
    if (this_present_campaignId || that_present_campaignId) {
      if (!(this_present_campaignId && that_present_campaignId))
        return false;
      if (this.campaignId != that.campaignId)
        return false;
    }

    boolean this_present_advertiserId = true && this.isSetAdvertiserId();
    boolean that_present_advertiserId = true && that.isSetAdvertiserId();
    if (this_present_advertiserId || that_present_advertiserId) {
      if (!(this_present_advertiserId && that_present_advertiserId))
        return false;
      if (!this.advertiserId.equals(that.advertiserId))
        return false;
    }

    boolean this_present_bidValue = true && this.isSetBidValue();
    boolean that_present_bidValue = true && that.isSetBidValue();
    if (this_present_bidValue || that_present_bidValue) {
      if (!(this_present_bidValue && that_present_bidValue))
        return false;
      if (this.bidValue != that.bidValue)
        return false;
    }

    boolean this_present_slotId = true && this.isSetSlotId();
    boolean that_present_slotId = true && that.isSetSlotId();
    if (this_present_slotId || that_present_slotId) {
      if (!(this_present_slotId && that_present_slotId))
        return false;
      if (this.slotId != that.slotId)
        return false;
    }

    boolean this_present_adv_inc_id = true && this.isSetAdv_inc_id();
    boolean that_present_adv_inc_id = true && that.isSetAdv_inc_id();
    if (this_present_adv_inc_id || that_present_adv_inc_id) {
      if (!(this_present_adv_inc_id && that_present_adv_inc_id))
        return false;
      if (this.adv_inc_id != that.adv_inc_id)
        return false;
    }

    boolean this_present_predictedCTR = true && this.isSetPredictedCTR();
    boolean that_present_predictedCTR = true && that.isSetPredictedCTR();
    if (this_present_predictedCTR || that_present_predictedCTR) {
      if (!(this_present_predictedCTR && that_present_predictedCTR))
        return false;
      if (this.predictedCTR != that.predictedCTR)
        return false;
    }

    boolean this_present_marketplace = true && this.isSetMarketplace();
    boolean that_present_marketplace = true && that.isSetMarketplace();
    if (this_present_marketplace || that_present_marketplace) {
      if (!(this_present_marketplace && that_present_marketplace))
        return false;
      if (this.marketplace != that.marketplace)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_impressionId = true && (isSetImpressionId());
    builder.append(present_impressionId);
    if (present_impressionId)
      builder.append(impressionId);

    boolean present_creativeId = true && (isSetCreativeId());
    builder.append(present_creativeId);
    if (present_creativeId)
      builder.append(creativeId);

    boolean present_adId = true && (isSetAdId());
    builder.append(present_adId);
    if (present_adId)
      builder.append(adId);

    boolean present_campaignId = true && (isSetCampaignId());
    builder.append(present_campaignId);
    if (present_campaignId)
      builder.append(campaignId);

    boolean present_advertiserId = true && (isSetAdvertiserId());
    builder.append(present_advertiserId);
    if (present_advertiserId)
      builder.append(advertiserId);

    boolean present_bidValue = true && (isSetBidValue());
    builder.append(present_bidValue);
    if (present_bidValue)
      builder.append(bidValue);

    boolean present_slotId = true && (isSetSlotId());
    builder.append(present_slotId);
    if (present_slotId)
      builder.append(slotId);

    boolean present_adv_inc_id = true && (isSetAdv_inc_id());
    builder.append(present_adv_inc_id);
    if (present_adv_inc_id)
      builder.append(adv_inc_id);

    boolean present_predictedCTR = true && (isSetPredictedCTR());
    builder.append(present_predictedCTR);
    if (present_predictedCTR)
      builder.append(predictedCTR);

    boolean present_marketplace = true && (isSetMarketplace());
    builder.append(present_marketplace);
    if (present_marketplace)
      builder.append(marketplace);

    return builder.toHashCode();
  }

  public int compareTo(Impression other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Impression typedOther = (Impression)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImpressionId()).compareTo(typedOther.isSetImpressionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImpressionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.impressionId, typedOther.impressionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreativeId()).compareTo(typedOther.isSetCreativeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreativeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creativeId, typedOther.creativeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(typedOther.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, typedOther.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignId()).compareTo(typedOther.isSetCampaignId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignId, typedOther.campaignId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvertiserId()).compareTo(typedOther.isSetAdvertiserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvertiserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advertiserId, typedOther.advertiserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidValue()).compareTo(typedOther.isSetBidValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidValue, typedOther.bidValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlotId()).compareTo(typedOther.isSetSlotId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slotId, typedOther.slotId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdv_inc_id()).compareTo(typedOther.isSetAdv_inc_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdv_inc_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adv_inc_id, typedOther.adv_inc_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredictedCTR()).compareTo(typedOther.isSetPredictedCTR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredictedCTR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictedCTR, typedOther.predictedCTR);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarketplace()).compareTo(typedOther.isSetMarketplace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarketplace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marketplace, typedOther.marketplace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Impression(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetImpressionId()) {
      if (!first) sb.append(", ");
      sb.append("impressionId:");
      if (this.impressionId == null) {
        sb.append("null");
      } else {
        sb.append(this.impressionId);
      }
      first = false;
    }
    if (isSetCreativeId()) {
      if (!first) sb.append(", ");
      sb.append("creativeId:");
      sb.append(this.creativeId);
      first = false;
    }
    if (isSetAdId()) {
      if (!first) sb.append(", ");
      sb.append("adId:");
      sb.append(this.adId);
      first = false;
    }
    if (isSetCampaignId()) {
      if (!first) sb.append(", ");
      sb.append("campaignId:");
      sb.append(this.campaignId);
      first = false;
    }
    if (isSetAdvertiserId()) {
      if (!first) sb.append(", ");
      sb.append("advertiserId:");
      if (this.advertiserId == null) {
        sb.append("null");
      } else {
        sb.append(this.advertiserId);
      }
      first = false;
    }
    if (isSetBidValue()) {
      if (!first) sb.append(", ");
      sb.append("bidValue:");
      sb.append(this.bidValue);
      first = false;
    }
    if (isSetSlotId()) {
      if (!first) sb.append(", ");
      sb.append("slotId:");
      sb.append(this.slotId);
      first = false;
    }
    if (isSetAdv_inc_id()) {
      if (!first) sb.append(", ");
      sb.append("adv_inc_id:");
      sb.append(this.adv_inc_id);
      first = false;
    }
    if (isSetPredictedCTR()) {
      if (!first) sb.append(", ");
      sb.append("predictedCTR:");
      sb.append(this.predictedCTR);
      first = false;
    }
    if (isSetMarketplace()) {
      if (!first) sb.append(", ");
      sb.append("marketplace:");
      sb.append(this.marketplace);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImpressionStandardSchemeFactory implements SchemeFactory {
    public ImpressionStandardScheme getScheme() {
      return new ImpressionStandardScheme();
    }
  }

  private static class ImpressionStandardScheme extends StandardScheme<Impression> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Impression struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMPRESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.impressionId = iprot.readString();
              struct.setImpressionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creativeId = iprot.readI32();
              struct.setCreativeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adId = iprot.readI32();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignId = iprot.readI32();
              struct.setCampaignIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ADVERTISER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.advertiserId = iprot.readString();
              struct.setAdvertiserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BID_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bidValue = iprot.readDouble();
              struct.setBidValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SLOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.slotId = iprot.readI16();
              struct.setSlotIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADV_INC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adv_inc_id = iprot.readI32();
              struct.setAdv_inc_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PREDICTED_CTR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.predictedCTR = iprot.readDouble();
              struct.setPredictedCTRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MARKETPLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.marketplace = iprot.readI16();
              struct.setMarketplaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Impression struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.impressionId != null) {
        if (struct.isSetImpressionId()) {
          oprot.writeFieldBegin(IMPRESSION_ID_FIELD_DESC);
          oprot.writeString(struct.impressionId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreativeId()) {
        oprot.writeFieldBegin(CREATIVE_ID_FIELD_DESC);
        oprot.writeI32(struct.creativeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdId()) {
        oprot.writeFieldBegin(AD_ID_FIELD_DESC);
        oprot.writeI32(struct.adId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCampaignId()) {
        oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
        oprot.writeI32(struct.campaignId);
        oprot.writeFieldEnd();
      }
      if (struct.advertiserId != null) {
        if (struct.isSetAdvertiserId()) {
          oprot.writeFieldBegin(ADVERTISER_ID_FIELD_DESC);
          oprot.writeString(struct.advertiserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBidValue()) {
        oprot.writeFieldBegin(BID_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.bidValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSlotId()) {
        oprot.writeFieldBegin(SLOT_ID_FIELD_DESC);
        oprot.writeI16(struct.slotId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdv_inc_id()) {
        oprot.writeFieldBegin(ADV_INC_ID_FIELD_DESC);
        oprot.writeI32(struct.adv_inc_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPredictedCTR()) {
        oprot.writeFieldBegin(PREDICTED_CTR_FIELD_DESC);
        oprot.writeDouble(struct.predictedCTR);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMarketplace()) {
        oprot.writeFieldBegin(MARKETPLACE_FIELD_DESC);
        oprot.writeI16(struct.marketplace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImpressionTupleSchemeFactory implements SchemeFactory {
    public ImpressionTupleScheme getScheme() {
      return new ImpressionTupleScheme();
    }
  }

  private static class ImpressionTupleScheme extends TupleScheme<Impression> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Impression struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetImpressionId()) {
        optionals.set(1);
      }
      if (struct.isSetCreativeId()) {
        optionals.set(2);
      }
      if (struct.isSetAdId()) {
        optionals.set(3);
      }
      if (struct.isSetCampaignId()) {
        optionals.set(4);
      }
      if (struct.isSetAdvertiserId()) {
        optionals.set(5);
      }
      if (struct.isSetBidValue()) {
        optionals.set(6);
      }
      if (struct.isSetSlotId()) {
        optionals.set(7);
      }
      if (struct.isSetAdv_inc_id()) {
        optionals.set(8);
      }
      if (struct.isSetPredictedCTR()) {
        optionals.set(9);
      }
      if (struct.isSetMarketplace()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetImpressionId()) {
        oprot.writeString(struct.impressionId);
      }
      if (struct.isSetCreativeId()) {
        oprot.writeI32(struct.creativeId);
      }
      if (struct.isSetAdId()) {
        oprot.writeI32(struct.adId);
      }
      if (struct.isSetCampaignId()) {
        oprot.writeI32(struct.campaignId);
      }
      if (struct.isSetAdvertiserId()) {
        oprot.writeString(struct.advertiserId);
      }
      if (struct.isSetBidValue()) {
        oprot.writeDouble(struct.bidValue);
      }
      if (struct.isSetSlotId()) {
        oprot.writeI16(struct.slotId);
      }
      if (struct.isSetAdv_inc_id()) {
        oprot.writeI32(struct.adv_inc_id);
      }
      if (struct.isSetPredictedCTR()) {
        oprot.writeDouble(struct.predictedCTR);
      }
      if (struct.isSetMarketplace()) {
        oprot.writeI16(struct.marketplace);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Impression struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.impressionId = iprot.readString();
        struct.setImpressionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creativeId = iprot.readI32();
        struct.setCreativeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.adId = iprot.readI32();
        struct.setAdIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.campaignId = iprot.readI32();
        struct.setCampaignIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.advertiserId = iprot.readString();
        struct.setAdvertiserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bidValue = iprot.readDouble();
        struct.setBidValueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.slotId = iprot.readI16();
        struct.setSlotIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.adv_inc_id = iprot.readI32();
        struct.setAdv_inc_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.predictedCTR = iprot.readDouble();
        struct.setPredictedCTRIsSet(true);
      }
      if (incoming.get(10)) {
        struct.marketplace = iprot.readI16();
        struct.setMarketplaceIsSet(true);
      }
    }
  }

}

