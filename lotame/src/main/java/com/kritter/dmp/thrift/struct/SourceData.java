/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SourceData implements org.apache.thrift.TBase<SourceData, SourceData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SourceData");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("app_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BRAND_FIELD_DESC = new org.apache.thrift.protocol.TField("brand", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("point", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("campaign_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField POINT_MULTIPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("point_multiply", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SNAPEARN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("snapearn_id", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField RECEIPT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("receipt_number", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operator_id", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REJECTED_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("rejected_reason", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SourceDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SourceDataTupleSchemeFactory());
  }

  public byte version; // required
  public String app_id; // optional
  public int brand; // optional
  public int point; // optional
  public int campaign_type; // optional
  public int point_multiply; // optional
  public int snapearn_id; // optional
  public String receipt_number; // optional
  public int outlet_id; // optional
  public int operator_id; // optional
  public int rejected_reason; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    APP_ID((short)2, "app_id"),
    BRAND((short)3, "brand"),
    POINT((short)4, "point"),
    CAMPAIGN_TYPE((short)5, "campaign_type"),
    POINT_MULTIPLY((short)6, "point_multiply"),
    SNAPEARN_ID((short)7, "snapearn_id"),
    RECEIPT_NUMBER((short)8, "receipt_number"),
    OUTLET_ID((short)9, "outlet_id"),
    OPERATOR_ID((short)10, "operator_id"),
    REJECTED_REASON((short)11, "rejected_reason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // APP_ID
          return APP_ID;
        case 3: // BRAND
          return BRAND;
        case 4: // POINT
          return POINT;
        case 5: // CAMPAIGN_TYPE
          return CAMPAIGN_TYPE;
        case 6: // POINT_MULTIPLY
          return POINT_MULTIPLY;
        case 7: // SNAPEARN_ID
          return SNAPEARN_ID;
        case 8: // RECEIPT_NUMBER
          return RECEIPT_NUMBER;
        case 9: // OUTLET_ID
          return OUTLET_ID;
        case 10: // OPERATOR_ID
          return OPERATOR_ID;
        case 11: // REJECTED_REASON
          return REJECTED_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __BRAND_ISSET_ID = 1;
  private static final int __POINT_ISSET_ID = 2;
  private static final int __CAMPAIGN_TYPE_ISSET_ID = 3;
  private static final int __POINT_MULTIPLY_ISSET_ID = 4;
  private static final int __SNAPEARN_ID_ISSET_ID = 5;
  private static final int __OUTLET_ID_ISSET_ID = 6;
  private static final int __OPERATOR_ID_ISSET_ID = 7;
  private static final int __REJECTED_REASON_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.APP_ID,_Fields.BRAND,_Fields.POINT,_Fields.CAMPAIGN_TYPE,_Fields.POINT_MULTIPLY,_Fields.SNAPEARN_ID,_Fields.RECEIPT_NUMBER,_Fields.OUTLET_ID,_Fields.OPERATOR_ID,_Fields.REJECTED_REASON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("app_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND, new org.apache.thrift.meta_data.FieldMetaData("brand", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT, new org.apache.thrift.meta_data.FieldMetaData("point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAMPAIGN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("campaign_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POINT_MULTIPLY, new org.apache.thrift.meta_data.FieldMetaData("point_multiply", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SNAPEARN_ID, new org.apache.thrift.meta_data.FieldMetaData("snapearn_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIPT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("receipt_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operator_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REJECTED_REASON, new org.apache.thrift.meta_data.FieldMetaData("rejected_reason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SourceData.class, metaDataMap);
  }

  public SourceData() {
    this.version = (byte)1;

  }

  public SourceData(
    byte version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SourceData(SourceData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetApp_id()) {
      this.app_id = other.app_id;
    }
    this.brand = other.brand;
    this.point = other.point;
    this.campaign_type = other.campaign_type;
    this.point_multiply = other.point_multiply;
    this.snapearn_id = other.snapearn_id;
    if (other.isSetReceipt_number()) {
      this.receipt_number = other.receipt_number;
    }
    this.outlet_id = other.outlet_id;
    this.operator_id = other.operator_id;
    this.rejected_reason = other.rejected_reason;
  }

  public SourceData deepCopy() {
    return new SourceData(this);
  }

  @Override
  public void clear() {
    this.version = (byte)1;

    this.app_id = null;
    setBrandIsSet(false);
    this.brand = 0;
    setPointIsSet(false);
    this.point = 0;
    setCampaign_typeIsSet(false);
    this.campaign_type = 0;
    setPoint_multiplyIsSet(false);
    this.point_multiply = 0;
    setSnapearn_idIsSet(false);
    this.snapearn_id = 0;
    this.receipt_number = null;
    setOutlet_idIsSet(false);
    this.outlet_id = 0;
    setOperator_idIsSet(false);
    this.operator_id = 0;
    setRejected_reasonIsSet(false);
    this.rejected_reason = 0;
  }

  public byte getVersion() {
    return this.version;
  }

  public SourceData setVersion(byte version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getApp_id() {
    return this.app_id;
  }

  public SourceData setApp_id(String app_id) {
    this.app_id = app_id;
    return this;
  }

  public void unsetApp_id() {
    this.app_id = null;
  }

  /** Returns true if field app_id is set (has been assigned a value) and false otherwise */
  public boolean isSetApp_id() {
    return this.app_id != null;
  }

  public void setApp_idIsSet(boolean value) {
    if (!value) {
      this.app_id = null;
    }
  }

  public int getBrand() {
    return this.brand;
  }

  public SourceData setBrand(int brand) {
    this.brand = brand;
    setBrandIsSet(true);
    return this;
  }

  public void unsetBrand() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRAND_ISSET_ID);
  }

  /** Returns true if field brand is set (has been assigned a value) and false otherwise */
  public boolean isSetBrand() {
    return EncodingUtils.testBit(__isset_bitfield, __BRAND_ISSET_ID);
  }

  public void setBrandIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRAND_ISSET_ID, value);
  }

  public int getPoint() {
    return this.point;
  }

  public SourceData setPoint(int point) {
    this.point = point;
    setPointIsSet(true);
    return this;
  }

  public void unsetPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  /** Returns true if field point is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_ISSET_ID);
  }

  public void setPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_ISSET_ID, value);
  }

  public int getCampaign_type() {
    return this.campaign_type;
  }

  public SourceData setCampaign_type(int campaign_type) {
    this.campaign_type = campaign_type;
    setCampaign_typeIsSet(true);
    return this;
  }

  public void unsetCampaign_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGN_TYPE_ISSET_ID);
  }

  /** Returns true if field campaign_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaign_type() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGN_TYPE_ISSET_ID);
  }

  public void setCampaign_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGN_TYPE_ISSET_ID, value);
  }

  public int getPoint_multiply() {
    return this.point_multiply;
  }

  public SourceData setPoint_multiply(int point_multiply) {
    this.point_multiply = point_multiply;
    setPoint_multiplyIsSet(true);
    return this;
  }

  public void unsetPoint_multiply() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POINT_MULTIPLY_ISSET_ID);
  }

  /** Returns true if field point_multiply is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint_multiply() {
    return EncodingUtils.testBit(__isset_bitfield, __POINT_MULTIPLY_ISSET_ID);
  }

  public void setPoint_multiplyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POINT_MULTIPLY_ISSET_ID, value);
  }

  public int getSnapearn_id() {
    return this.snapearn_id;
  }

  public SourceData setSnapearn_id(int snapearn_id) {
    this.snapearn_id = snapearn_id;
    setSnapearn_idIsSet(true);
    return this;
  }

  public void unsetSnapearn_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SNAPEARN_ID_ISSET_ID);
  }

  /** Returns true if field snapearn_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapearn_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SNAPEARN_ID_ISSET_ID);
  }

  public void setSnapearn_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SNAPEARN_ID_ISSET_ID, value);
  }

  public String getReceipt_number() {
    return this.receipt_number;
  }

  public SourceData setReceipt_number(String receipt_number) {
    this.receipt_number = receipt_number;
    return this;
  }

  public void unsetReceipt_number() {
    this.receipt_number = null;
  }

  /** Returns true if field receipt_number is set (has been assigned a value) and false otherwise */
  public boolean isSetReceipt_number() {
    return this.receipt_number != null;
  }

  public void setReceipt_numberIsSet(boolean value) {
    if (!value) {
      this.receipt_number = null;
    }
  }

  public int getOutlet_id() {
    return this.outlet_id;
  }

  public SourceData setOutlet_id(int outlet_id) {
    this.outlet_id = outlet_id;
    setOutlet_idIsSet(true);
    return this;
  }

  public void unsetOutlet_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
  }

  /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOutlet_id() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
  }

  public void setOutlet_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
  }

  public int getOperator_id() {
    return this.operator_id;
  }

  public SourceData setOperator_id(int operator_id) {
    this.operator_id = operator_id;
    setOperator_idIsSet(true);
    return this;
  }

  public void unsetOperator_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATOR_ID_ISSET_ID);
  }

  /** Returns true if field operator_id is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator_id() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATOR_ID_ISSET_ID);
  }

  public void setOperator_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATOR_ID_ISSET_ID, value);
  }

  public int getRejected_reason() {
    return this.rejected_reason;
  }

  public SourceData setRejected_reason(int rejected_reason) {
    this.rejected_reason = rejected_reason;
    setRejected_reasonIsSet(true);
    return this;
  }

  public void unsetRejected_reason() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REJECTED_REASON_ISSET_ID);
  }

  /** Returns true if field rejected_reason is set (has been assigned a value) and false otherwise */
  public boolean isSetRejected_reason() {
    return EncodingUtils.testBit(__isset_bitfield, __REJECTED_REASON_ISSET_ID);
  }

  public void setRejected_reasonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REJECTED_REASON_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Byte)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetApp_id();
      } else {
        setApp_id((String)value);
      }
      break;

    case BRAND:
      if (value == null) {
        unsetBrand();
      } else {
        setBrand((Integer)value);
      }
      break;

    case POINT:
      if (value == null) {
        unsetPoint();
      } else {
        setPoint((Integer)value);
      }
      break;

    case CAMPAIGN_TYPE:
      if (value == null) {
        unsetCampaign_type();
      } else {
        setCampaign_type((Integer)value);
      }
      break;

    case POINT_MULTIPLY:
      if (value == null) {
        unsetPoint_multiply();
      } else {
        setPoint_multiply((Integer)value);
      }
      break;

    case SNAPEARN_ID:
      if (value == null) {
        unsetSnapearn_id();
      } else {
        setSnapearn_id((Integer)value);
      }
      break;

    case RECEIPT_NUMBER:
      if (value == null) {
        unsetReceipt_number();
      } else {
        setReceipt_number((String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutlet_id();
      } else {
        setOutlet_id((Integer)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperator_id();
      } else {
        setOperator_id((Integer)value);
      }
      break;

    case REJECTED_REASON:
      if (value == null) {
        unsetRejected_reason();
      } else {
        setRejected_reason((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Byte.valueOf(getVersion());

    case APP_ID:
      return getApp_id();

    case BRAND:
      return Integer.valueOf(getBrand());

    case POINT:
      return Integer.valueOf(getPoint());

    case CAMPAIGN_TYPE:
      return Integer.valueOf(getCampaign_type());

    case POINT_MULTIPLY:
      return Integer.valueOf(getPoint_multiply());

    case SNAPEARN_ID:
      return Integer.valueOf(getSnapearn_id());

    case RECEIPT_NUMBER:
      return getReceipt_number();

    case OUTLET_ID:
      return Integer.valueOf(getOutlet_id());

    case OPERATOR_ID:
      return Integer.valueOf(getOperator_id());

    case REJECTED_REASON:
      return Integer.valueOf(getRejected_reason());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case APP_ID:
      return isSetApp_id();
    case BRAND:
      return isSetBrand();
    case POINT:
      return isSetPoint();
    case CAMPAIGN_TYPE:
      return isSetCampaign_type();
    case POINT_MULTIPLY:
      return isSetPoint_multiply();
    case SNAPEARN_ID:
      return isSetSnapearn_id();
    case RECEIPT_NUMBER:
      return isSetReceipt_number();
    case OUTLET_ID:
      return isSetOutlet_id();
    case OPERATOR_ID:
      return isSetOperator_id();
    case REJECTED_REASON:
      return isSetRejected_reason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SourceData)
      return this.equals((SourceData)that);
    return false;
  }

  public boolean equals(SourceData that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_app_id = true && this.isSetApp_id();
    boolean that_present_app_id = true && that.isSetApp_id();
    if (this_present_app_id || that_present_app_id) {
      if (!(this_present_app_id && that_present_app_id))
        return false;
      if (!this.app_id.equals(that.app_id))
        return false;
    }

    boolean this_present_brand = true && this.isSetBrand();
    boolean that_present_brand = true && that.isSetBrand();
    if (this_present_brand || that_present_brand) {
      if (!(this_present_brand && that_present_brand))
        return false;
      if (this.brand != that.brand)
        return false;
    }

    boolean this_present_point = true && this.isSetPoint();
    boolean that_present_point = true && that.isSetPoint();
    if (this_present_point || that_present_point) {
      if (!(this_present_point && that_present_point))
        return false;
      if (this.point != that.point)
        return false;
    }

    boolean this_present_campaign_type = true && this.isSetCampaign_type();
    boolean that_present_campaign_type = true && that.isSetCampaign_type();
    if (this_present_campaign_type || that_present_campaign_type) {
      if (!(this_present_campaign_type && that_present_campaign_type))
        return false;
      if (this.campaign_type != that.campaign_type)
        return false;
    }

    boolean this_present_point_multiply = true && this.isSetPoint_multiply();
    boolean that_present_point_multiply = true && that.isSetPoint_multiply();
    if (this_present_point_multiply || that_present_point_multiply) {
      if (!(this_present_point_multiply && that_present_point_multiply))
        return false;
      if (this.point_multiply != that.point_multiply)
        return false;
    }

    boolean this_present_snapearn_id = true && this.isSetSnapearn_id();
    boolean that_present_snapearn_id = true && that.isSetSnapearn_id();
    if (this_present_snapearn_id || that_present_snapearn_id) {
      if (!(this_present_snapearn_id && that_present_snapearn_id))
        return false;
      if (this.snapearn_id != that.snapearn_id)
        return false;
    }

    boolean this_present_receipt_number = true && this.isSetReceipt_number();
    boolean that_present_receipt_number = true && that.isSetReceipt_number();
    if (this_present_receipt_number || that_present_receipt_number) {
      if (!(this_present_receipt_number && that_present_receipt_number))
        return false;
      if (!this.receipt_number.equals(that.receipt_number))
        return false;
    }

    boolean this_present_outlet_id = true && this.isSetOutlet_id();
    boolean that_present_outlet_id = true && that.isSetOutlet_id();
    if (this_present_outlet_id || that_present_outlet_id) {
      if (!(this_present_outlet_id && that_present_outlet_id))
        return false;
      if (this.outlet_id != that.outlet_id)
        return false;
    }

    boolean this_present_operator_id = true && this.isSetOperator_id();
    boolean that_present_operator_id = true && that.isSetOperator_id();
    if (this_present_operator_id || that_present_operator_id) {
      if (!(this_present_operator_id && that_present_operator_id))
        return false;
      if (this.operator_id != that.operator_id)
        return false;
    }

    boolean this_present_rejected_reason = true && this.isSetRejected_reason();
    boolean that_present_rejected_reason = true && that.isSetRejected_reason();
    if (this_present_rejected_reason || that_present_rejected_reason) {
      if (!(this_present_rejected_reason && that_present_rejected_reason))
        return false;
      if (this.rejected_reason != that.rejected_reason)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_app_id = true && (isSetApp_id());
    builder.append(present_app_id);
    if (present_app_id)
      builder.append(app_id);

    boolean present_brand = true && (isSetBrand());
    builder.append(present_brand);
    if (present_brand)
      builder.append(brand);

    boolean present_point = true && (isSetPoint());
    builder.append(present_point);
    if (present_point)
      builder.append(point);

    boolean present_campaign_type = true && (isSetCampaign_type());
    builder.append(present_campaign_type);
    if (present_campaign_type)
      builder.append(campaign_type);

    boolean present_point_multiply = true && (isSetPoint_multiply());
    builder.append(present_point_multiply);
    if (present_point_multiply)
      builder.append(point_multiply);

    boolean present_snapearn_id = true && (isSetSnapearn_id());
    builder.append(present_snapearn_id);
    if (present_snapearn_id)
      builder.append(snapearn_id);

    boolean present_receipt_number = true && (isSetReceipt_number());
    builder.append(present_receipt_number);
    if (present_receipt_number)
      builder.append(receipt_number);

    boolean present_outlet_id = true && (isSetOutlet_id());
    builder.append(present_outlet_id);
    if (present_outlet_id)
      builder.append(outlet_id);

    boolean present_operator_id = true && (isSetOperator_id());
    builder.append(present_operator_id);
    if (present_operator_id)
      builder.append(operator_id);

    boolean present_rejected_reason = true && (isSetRejected_reason());
    builder.append(present_rejected_reason);
    if (present_rejected_reason)
      builder.append(rejected_reason);

    return builder.toHashCode();
  }

  public int compareTo(SourceData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SourceData typedOther = (SourceData)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApp_id()).compareTo(typedOther.isSetApp_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApp_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_id, typedOther.app_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrand()).compareTo(typedOther.isSetBrand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brand, typedOther.brand);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint()).compareTo(typedOther.isSetPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point, typedOther.point);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaign_type()).compareTo(typedOther.isSetCampaign_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaign_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaign_type, typedOther.campaign_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint_multiply()).compareTo(typedOther.isSetPoint_multiply());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint_multiply()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point_multiply, typedOther.point_multiply);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapearn_id()).compareTo(typedOther.isSetSnapearn_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapearn_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapearn_id, typedOther.snapearn_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceipt_number()).compareTo(typedOther.isSetReceipt_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceipt_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receipt_number, typedOther.receipt_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutlet_id()).compareTo(typedOther.isSetOutlet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutlet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, typedOther.outlet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator_id()).compareTo(typedOther.isSetOperator_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator_id, typedOther.operator_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRejected_reason()).compareTo(typedOther.isSetRejected_reason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejected_reason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rejected_reason, typedOther.rejected_reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SourceData(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetApp_id()) {
      if (!first) sb.append(", ");
      sb.append("app_id:");
      if (this.app_id == null) {
        sb.append("null");
      } else {
        sb.append(this.app_id);
      }
      first = false;
    }
    if (isSetBrand()) {
      if (!first) sb.append(", ");
      sb.append("brand:");
      sb.append(this.brand);
      first = false;
    }
    if (isSetPoint()) {
      if (!first) sb.append(", ");
      sb.append("point:");
      sb.append(this.point);
      first = false;
    }
    if (isSetCampaign_type()) {
      if (!first) sb.append(", ");
      sb.append("campaign_type:");
      sb.append(this.campaign_type);
      first = false;
    }
    if (isSetPoint_multiply()) {
      if (!first) sb.append(", ");
      sb.append("point_multiply:");
      sb.append(this.point_multiply);
      first = false;
    }
    if (isSetSnapearn_id()) {
      if (!first) sb.append(", ");
      sb.append("snapearn_id:");
      sb.append(this.snapearn_id);
      first = false;
    }
    if (isSetReceipt_number()) {
      if (!first) sb.append(", ");
      sb.append("receipt_number:");
      if (this.receipt_number == null) {
        sb.append("null");
      } else {
        sb.append(this.receipt_number);
      }
      first = false;
    }
    if (isSetOutlet_id()) {
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
    }
    if (isSetOperator_id()) {
      if (!first) sb.append(", ");
      sb.append("operator_id:");
      sb.append(this.operator_id);
      first = false;
    }
    if (isSetRejected_reason()) {
      if (!first) sb.append(", ");
      sb.append("rejected_reason:");
      sb.append(this.rejected_reason);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SourceDataStandardSchemeFactory implements SchemeFactory {
    public SourceDataStandardScheme getScheme() {
      return new SourceDataStandardScheme();
    }
  }

  private static class SourceDataStandardScheme extends StandardScheme<SourceData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SourceData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.version = iprot.readByte();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.app_id = iprot.readString();
              struct.setApp_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BRAND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brand = iprot.readI32();
              struct.setBrandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point = iprot.readI32();
              struct.setPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAMPAIGN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaign_type = iprot.readI32();
              struct.setCampaign_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POINT_MULTIPLY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.point_multiply = iprot.readI32();
              struct.setPoint_multiplyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SNAPEARN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.snapearn_id = iprot.readI32();
              struct.setSnapearn_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECEIPT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receipt_number = iprot.readString();
              struct.setReceipt_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outlet_id = iprot.readI32();
              struct.setOutlet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operator_id = iprot.readI32();
              struct.setOperator_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REJECTED_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rejected_reason = iprot.readI32();
              struct.setRejected_reasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SourceData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeByte(struct.version);
      oprot.writeFieldEnd();
      if (struct.app_id != null) {
        if (struct.isSetApp_id()) {
          oprot.writeFieldBegin(APP_ID_FIELD_DESC);
          oprot.writeString(struct.app_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBrand()) {
        oprot.writeFieldBegin(BRAND_FIELD_DESC);
        oprot.writeI32(struct.brand);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoint()) {
        oprot.writeFieldBegin(POINT_FIELD_DESC);
        oprot.writeI32(struct.point);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCampaign_type()) {
        oprot.writeFieldBegin(CAMPAIGN_TYPE_FIELD_DESC);
        oprot.writeI32(struct.campaign_type);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPoint_multiply()) {
        oprot.writeFieldBegin(POINT_MULTIPLY_FIELD_DESC);
        oprot.writeI32(struct.point_multiply);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSnapearn_id()) {
        oprot.writeFieldBegin(SNAPEARN_ID_FIELD_DESC);
        oprot.writeI32(struct.snapearn_id);
        oprot.writeFieldEnd();
      }
      if (struct.receipt_number != null) {
        if (struct.isSetReceipt_number()) {
          oprot.writeFieldBegin(RECEIPT_NUMBER_FIELD_DESC);
          oprot.writeString(struct.receipt_number);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutlet_id()) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI32(struct.outlet_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOperator_id()) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeI32(struct.operator_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRejected_reason()) {
        oprot.writeFieldBegin(REJECTED_REASON_FIELD_DESC);
        oprot.writeI32(struct.rejected_reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SourceDataTupleSchemeFactory implements SchemeFactory {
    public SourceDataTupleScheme getScheme() {
      return new SourceDataTupleScheme();
    }
  }

  private static class SourceDataTupleScheme extends TupleScheme<SourceData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SourceData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetApp_id()) {
        optionals.set(1);
      }
      if (struct.isSetBrand()) {
        optionals.set(2);
      }
      if (struct.isSetPoint()) {
        optionals.set(3);
      }
      if (struct.isSetCampaign_type()) {
        optionals.set(4);
      }
      if (struct.isSetPoint_multiply()) {
        optionals.set(5);
      }
      if (struct.isSetSnapearn_id()) {
        optionals.set(6);
      }
      if (struct.isSetReceipt_number()) {
        optionals.set(7);
      }
      if (struct.isSetOutlet_id()) {
        optionals.set(8);
      }
      if (struct.isSetOperator_id()) {
        optionals.set(9);
      }
      if (struct.isSetRejected_reason()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetVersion()) {
        oprot.writeByte(struct.version);
      }
      if (struct.isSetApp_id()) {
        oprot.writeString(struct.app_id);
      }
      if (struct.isSetBrand()) {
        oprot.writeI32(struct.brand);
      }
      if (struct.isSetPoint()) {
        oprot.writeI32(struct.point);
      }
      if (struct.isSetCampaign_type()) {
        oprot.writeI32(struct.campaign_type);
      }
      if (struct.isSetPoint_multiply()) {
        oprot.writeI32(struct.point_multiply);
      }
      if (struct.isSetSnapearn_id()) {
        oprot.writeI32(struct.snapearn_id);
      }
      if (struct.isSetReceipt_number()) {
        oprot.writeString(struct.receipt_number);
      }
      if (struct.isSetOutlet_id()) {
        oprot.writeI32(struct.outlet_id);
      }
      if (struct.isSetOperator_id()) {
        oprot.writeI32(struct.operator_id);
      }
      if (struct.isSetRejected_reason()) {
        oprot.writeI32(struct.rejected_reason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SourceData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.version = iprot.readByte();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.app_id = iprot.readString();
        struct.setApp_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brand = iprot.readI32();
        struct.setBrandIsSet(true);
      }
      if (incoming.get(3)) {
        struct.point = iprot.readI32();
        struct.setPointIsSet(true);
      }
      if (incoming.get(4)) {
        struct.campaign_type = iprot.readI32();
        struct.setCampaign_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.point_multiply = iprot.readI32();
        struct.setPoint_multiplyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.snapearn_id = iprot.readI32();
        struct.setSnapearn_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.receipt_number = iprot.readString();
        struct.setReceipt_numberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.outlet_id = iprot.readI32();
        struct.setOutlet_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operator_id = iprot.readI32();
        struct.setOperator_idIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rejected_reason = iprot.readI32();
        struct.setRejected_reasonIsSet(true);
      }
    }
  }

}

