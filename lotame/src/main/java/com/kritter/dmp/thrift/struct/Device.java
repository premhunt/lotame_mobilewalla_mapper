/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Device implements org.apache.thrift.TBase<Device, Device._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Device");

  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MANUFACTURER_FIELD_DESC = new org.apache.thrift.protocol.TField("manufacturer", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OSVERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("osversion", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeviceTupleSchemeFactory());
  }

  public int os; // optional
  public int manufacturer; // optional
  public int osversion; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OS((short)1, "os"),
    MANUFACTURER((short)2, "manufacturer"),
    OSVERSION((short)3, "osversion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OS
          return OS;
        case 2: // MANUFACTURER
          return MANUFACTURER;
        case 3: // OSVERSION
          return OSVERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OS_ISSET_ID = 0;
  private static final int __MANUFACTURER_ISSET_ID = 1;
  private static final int __OSVERSION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.OS,_Fields.MANUFACTURER,_Fields.OSVERSION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MANUFACTURER, new org.apache.thrift.meta_data.FieldMetaData("manufacturer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OSVERSION, new org.apache.thrift.meta_data.FieldMetaData("osversion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Device.class, metaDataMap);
  }

  public Device() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Device(Device other) {
    __isset_bitfield = other.__isset_bitfield;
    this.os = other.os;
    this.manufacturer = other.manufacturer;
    this.osversion = other.osversion;
  }

  public Device deepCopy() {
    return new Device(this);
  }

  @Override
  public void clear() {
    setOsIsSet(false);
    this.os = 0;
    setManufacturerIsSet(false);
    this.manufacturer = 0;
    setOsversionIsSet(false);
    this.osversion = 0;
  }

  public int getOs() {
    return this.os;
  }

  public Device setOs(int os) {
    this.os = os;
    setOsIsSet(true);
    return this;
  }

  public void unsetOs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OS_ISSET_ID);
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return EncodingUtils.testBit(__isset_bitfield, __OS_ISSET_ID);
  }

  public void setOsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OS_ISSET_ID, value);
  }

  public int getManufacturer() {
    return this.manufacturer;
  }

  public Device setManufacturer(int manufacturer) {
    this.manufacturer = manufacturer;
    setManufacturerIsSet(true);
    return this;
  }

  public void unsetManufacturer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANUFACTURER_ISSET_ID);
  }

  /** Returns true if field manufacturer is set (has been assigned a value) and false otherwise */
  public boolean isSetManufacturer() {
    return EncodingUtils.testBit(__isset_bitfield, __MANUFACTURER_ISSET_ID);
  }

  public void setManufacturerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANUFACTURER_ISSET_ID, value);
  }

  public int getOsversion() {
    return this.osversion;
  }

  public Device setOsversion(int osversion) {
    this.osversion = osversion;
    setOsversionIsSet(true);
    return this;
  }

  public void unsetOsversion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OSVERSION_ISSET_ID);
  }

  /** Returns true if field osversion is set (has been assigned a value) and false otherwise */
  public boolean isSetOsversion() {
    return EncodingUtils.testBit(__isset_bitfield, __OSVERSION_ISSET_ID);
  }

  public void setOsversionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OSVERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((Integer)value);
      }
      break;

    case MANUFACTURER:
      if (value == null) {
        unsetManufacturer();
      } else {
        setManufacturer((Integer)value);
      }
      break;

    case OSVERSION:
      if (value == null) {
        unsetOsversion();
      } else {
        setOsversion((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OS:
      return Integer.valueOf(getOs());

    case MANUFACTURER:
      return Integer.valueOf(getManufacturer());

    case OSVERSION:
      return Integer.valueOf(getOsversion());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OS:
      return isSetOs();
    case MANUFACTURER:
      return isSetManufacturer();
    case OSVERSION:
      return isSetOsversion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Device)
      return this.equals((Device)that);
    return false;
  }

  public boolean equals(Device that) {
    if (that == null)
      return false;

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (this.os != that.os)
        return false;
    }

    boolean this_present_manufacturer = true && this.isSetManufacturer();
    boolean that_present_manufacturer = true && that.isSetManufacturer();
    if (this_present_manufacturer || that_present_manufacturer) {
      if (!(this_present_manufacturer && that_present_manufacturer))
        return false;
      if (this.manufacturer != that.manufacturer)
        return false;
    }

    boolean this_present_osversion = true && this.isSetOsversion();
    boolean that_present_osversion = true && that.isSetOsversion();
    if (this_present_osversion || that_present_osversion) {
      if (!(this_present_osversion && that_present_osversion))
        return false;
      if (this.osversion != that.osversion)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_os = true && (isSetOs());
    builder.append(present_os);
    if (present_os)
      builder.append(os);

    boolean present_manufacturer = true && (isSetManufacturer());
    builder.append(present_manufacturer);
    if (present_manufacturer)
      builder.append(manufacturer);

    boolean present_osversion = true && (isSetOsversion());
    builder.append(present_osversion);
    if (present_osversion)
      builder.append(osversion);

    return builder.toHashCode();
  }

  public int compareTo(Device other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Device typedOther = (Device)other;

    lastComparison = Boolean.valueOf(isSetOs()).compareTo(typedOther.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, typedOther.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManufacturer()).compareTo(typedOther.isSetManufacturer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManufacturer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manufacturer, typedOther.manufacturer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsversion()).compareTo(typedOther.isSetOsversion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsversion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osversion, typedOther.osversion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Device(");
    boolean first = true;

    if (isSetOs()) {
      sb.append("os:");
      sb.append(this.os);
      first = false;
    }
    if (isSetManufacturer()) {
      if (!first) sb.append(", ");
      sb.append("manufacturer:");
      sb.append(this.manufacturer);
      first = false;
    }
    if (isSetOsversion()) {
      if (!first) sb.append(", ");
      sb.append("osversion:");
      sb.append(this.osversion);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceStandardSchemeFactory implements SchemeFactory {
    public DeviceStandardScheme getScheme() {
      return new DeviceStandardScheme();
    }
  }

  private static class DeviceStandardScheme extends StandardScheme<Device> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Device struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.os = iprot.readI32();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MANUFACTURER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.manufacturer = iprot.readI32();
              struct.setManufacturerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OSVERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osversion = iprot.readI32();
              struct.setOsversionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Device struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetOs()) {
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeI32(struct.os);
        oprot.writeFieldEnd();
      }
      if (struct.isSetManufacturer()) {
        oprot.writeFieldBegin(MANUFACTURER_FIELD_DESC);
        oprot.writeI32(struct.manufacturer);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOsversion()) {
        oprot.writeFieldBegin(OSVERSION_FIELD_DESC);
        oprot.writeI32(struct.osversion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceTupleSchemeFactory implements SchemeFactory {
    public DeviceTupleScheme getScheme() {
      return new DeviceTupleScheme();
    }
  }

  private static class DeviceTupleScheme extends TupleScheme<Device> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Device struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOs()) {
        optionals.set(0);
      }
      if (struct.isSetManufacturer()) {
        optionals.set(1);
      }
      if (struct.isSetOsversion()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOs()) {
        oprot.writeI32(struct.os);
      }
      if (struct.isSetManufacturer()) {
        oprot.writeI32(struct.manufacturer);
      }
      if (struct.isSetOsversion()) {
        oprot.writeI32(struct.osversion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Device struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.os = iprot.readI32();
        struct.setOsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.manufacturer = iprot.readI32();
        struct.setManufacturerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.osversion = iprot.readI32();
        struct.setOsversionIsSet(true);
      }
    }
  }

}

