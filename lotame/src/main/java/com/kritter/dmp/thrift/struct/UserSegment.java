/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 */
public class UserSegment implements org.apache.thrift.TBase<UserSegment, UserSegment._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserSegment");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField SEGMENT_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentSet", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField LOTAME_AUDIENCE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("lotameAudienceSet", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserSegmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserSegmentTupleSchemeFactory());
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public byte version; // required
  public Set<Segment> segmentSet; // optional
  public Set<String> lotameAudienceSet; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Change version whenever there is change in the structure, more specifically when some field is removed.
     * Addition of a field doesn't require changes except for bookkeeping.
     */
    VERSION((short)1, "version"),
    SEGMENT_SET((short)2, "segmentSet"),
    LOTAME_AUDIENCE_SET((short)3, "lotameAudienceSet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // SEGMENT_SET
          return SEGMENT_SET;
        case 3: // LOTAME_AUDIENCE_SET
          return LOTAME_AUDIENCE_SET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SEGMENT_SET,_Fields.LOTAME_AUDIENCE_SET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SEGMENT_SET, new org.apache.thrift.meta_data.FieldMetaData("segmentSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Segment.class))));
    tmpMap.put(_Fields.LOTAME_AUDIENCE_SET, new org.apache.thrift.meta_data.FieldMetaData("lotameAudienceSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserSegment.class, metaDataMap);
  }

  public UserSegment() {
    this.version = (byte)1;

  }

  public UserSegment(
    byte version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserSegment(UserSegment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetSegmentSet()) {
      Set<Segment> __this__segmentSet = new HashSet<Segment>();
      for (Segment other_element : other.segmentSet) {
        __this__segmentSet.add(new Segment(other_element));
      }
      this.segmentSet = __this__segmentSet;
    }
    if (other.isSetLotameAudienceSet()) {
      Set<String> __this__lotameAudienceSet = new HashSet<String>();
      for (String other_element : other.lotameAudienceSet) {
        __this__lotameAudienceSet.add(other_element);
      }
      this.lotameAudienceSet = __this__lotameAudienceSet;
    }
  }

  public UserSegment deepCopy() {
    return new UserSegment(this);
  }

  @Override
  public void clear() {
    this.version = (byte)1;

    this.segmentSet = null;
    this.lotameAudienceSet = null;
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public byte getVersion() {
    return this.version;
  }

  /**
   * Change version whenever there is change in the structure, more specifically when some field is removed.
   * Addition of a field doesn't require changes except for bookkeeping.
   */
  public UserSegment setVersion(byte version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getSegmentSetSize() {
    return (this.segmentSet == null) ? 0 : this.segmentSet.size();
  }

  public java.util.Iterator<Segment> getSegmentSetIterator() {
    return (this.segmentSet == null) ? null : this.segmentSet.iterator();
  }

  public void addToSegmentSet(Segment elem) {
    if (this.segmentSet == null) {
      this.segmentSet = new HashSet<Segment>();
    }
    this.segmentSet.add(elem);
  }

  public Set<Segment> getSegmentSet() {
    return this.segmentSet;
  }

  public UserSegment setSegmentSet(Set<Segment> segmentSet) {
    this.segmentSet = segmentSet;
    return this;
  }

  public void unsetSegmentSet() {
    this.segmentSet = null;
  }

  /** Returns true if field segmentSet is set (has been assigned a value) and false otherwise */
  public boolean isSetSegmentSet() {
    return this.segmentSet != null;
  }

  public void setSegmentSetIsSet(boolean value) {
    if (!value) {
      this.segmentSet = null;
    }
  }

  public int getLotameAudienceSetSize() {
    return (this.lotameAudienceSet == null) ? 0 : this.lotameAudienceSet.size();
  }

  public java.util.Iterator<String> getLotameAudienceSetIterator() {
    return (this.lotameAudienceSet == null) ? null : this.lotameAudienceSet.iterator();
  }

  public void addToLotameAudienceSet(String elem) {
    if (this.lotameAudienceSet == null) {
      this.lotameAudienceSet = new HashSet<String>();
    }
    this.lotameAudienceSet.add(elem);
  }

  public Set<String> getLotameAudienceSet() {
    return this.lotameAudienceSet;
  }

  public UserSegment setLotameAudienceSet(Set<String> lotameAudienceSet) {
    this.lotameAudienceSet = lotameAudienceSet;
    return this;
  }

  public void unsetLotameAudienceSet() {
    this.lotameAudienceSet = null;
  }

  /** Returns true if field lotameAudienceSet is set (has been assigned a value) and false otherwise */
  public boolean isSetLotameAudienceSet() {
    return this.lotameAudienceSet != null;
  }

  public void setLotameAudienceSetIsSet(boolean value) {
    if (!value) {
      this.lotameAudienceSet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Byte)value);
      }
      break;

    case SEGMENT_SET:
      if (value == null) {
        unsetSegmentSet();
      } else {
        setSegmentSet((Set<Segment>)value);
      }
      break;

    case LOTAME_AUDIENCE_SET:
      if (value == null) {
        unsetLotameAudienceSet();
      } else {
        setLotameAudienceSet((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Byte.valueOf(getVersion());

    case SEGMENT_SET:
      return getSegmentSet();

    case LOTAME_AUDIENCE_SET:
      return getLotameAudienceSet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case SEGMENT_SET:
      return isSetSegmentSet();
    case LOTAME_AUDIENCE_SET:
      return isSetLotameAudienceSet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserSegment)
      return this.equals((UserSegment)that);
    return false;
  }

  public boolean equals(UserSegment that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_segmentSet = true && this.isSetSegmentSet();
    boolean that_present_segmentSet = true && that.isSetSegmentSet();
    if (this_present_segmentSet || that_present_segmentSet) {
      if (!(this_present_segmentSet && that_present_segmentSet))
        return false;
      if (!this.segmentSet.equals(that.segmentSet))
        return false;
    }

    boolean this_present_lotameAudienceSet = true && this.isSetLotameAudienceSet();
    boolean that_present_lotameAudienceSet = true && that.isSetLotameAudienceSet();
    if (this_present_lotameAudienceSet || that_present_lotameAudienceSet) {
      if (!(this_present_lotameAudienceSet && that_present_lotameAudienceSet))
        return false;
      if (!this.lotameAudienceSet.equals(that.lotameAudienceSet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_segmentSet = true && (isSetSegmentSet());
    builder.append(present_segmentSet);
    if (present_segmentSet)
      builder.append(segmentSet);

    boolean present_lotameAudienceSet = true && (isSetLotameAudienceSet());
    builder.append(present_lotameAudienceSet);
    if (present_lotameAudienceSet)
      builder.append(lotameAudienceSet);

    return builder.toHashCode();
  }

  public int compareTo(UserSegment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserSegment typedOther = (UserSegment)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSegmentSet()).compareTo(typedOther.isSetSegmentSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSegmentSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentSet, typedOther.segmentSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLotameAudienceSet()).compareTo(typedOther.isSetLotameAudienceSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLotameAudienceSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lotameAudienceSet, typedOther.lotameAudienceSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserSegment(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetSegmentSet()) {
      if (!first) sb.append(", ");
      sb.append("segmentSet:");
      if (this.segmentSet == null) {
        sb.append("null");
      } else {
        sb.append(this.segmentSet);
      }
      first = false;
    }
    if (isSetLotameAudienceSet()) {
      if (!first) sb.append(", ");
      sb.append("lotameAudienceSet:");
      if (this.lotameAudienceSet == null) {
        sb.append("null");
      } else {
        sb.append(this.lotameAudienceSet);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserSegmentStandardSchemeFactory implements SchemeFactory {
    public UserSegmentStandardScheme getScheme() {
      return new UserSegmentStandardScheme();
    }
  }

  private static class UserSegmentStandardScheme extends StandardScheme<UserSegment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserSegment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.version = iprot.readByte();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SEGMENT_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.segmentSet = new HashSet<Segment>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  Segment _elem2; // required
                  _elem2 = new Segment();
                  _elem2.read(iprot);
                  struct.segmentSet.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setSegmentSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOTAME_AUDIENCE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.lotameAudienceSet = new HashSet<String>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.lotameAudienceSet.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setLotameAudienceSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserSegment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeByte(struct.version);
      oprot.writeFieldEnd();
      if (struct.segmentSet != null) {
        if (struct.isSetSegmentSet()) {
          oprot.writeFieldBegin(SEGMENT_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.segmentSet.size()));
            for (Segment _iter6 : struct.segmentSet)
            {
              _iter6.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lotameAudienceSet != null) {
        if (struct.isSetLotameAudienceSet()) {
          oprot.writeFieldBegin(LOTAME_AUDIENCE_SET_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.lotameAudienceSet.size()));
            for (String _iter7 : struct.lotameAudienceSet)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserSegmentTupleSchemeFactory implements SchemeFactory {
    public UserSegmentTupleScheme getScheme() {
      return new UserSegmentTupleScheme();
    }
  }

  private static class UserSegmentTupleScheme extends TupleScheme<UserSegment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserSegment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetSegmentSet()) {
        optionals.set(1);
      }
      if (struct.isSetLotameAudienceSet()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetVersion()) {
        oprot.writeByte(struct.version);
      }
      if (struct.isSetSegmentSet()) {
        {
          oprot.writeI32(struct.segmentSet.size());
          for (Segment _iter8 : struct.segmentSet)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetLotameAudienceSet()) {
        {
          oprot.writeI32(struct.lotameAudienceSet.size());
          for (String _iter9 : struct.lotameAudienceSet)
          {
            oprot.writeString(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserSegment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.version = iprot.readByte();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set10 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.segmentSet = new HashSet<Segment>(2*_set10.size);
          for (int _i11 = 0; _i11 < _set10.size; ++_i11)
          {
            Segment _elem12; // required
            _elem12 = new Segment();
            _elem12.read(iprot);
            struct.segmentSet.add(_elem12);
          }
        }
        struct.setSegmentSetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.lotameAudienceSet = new HashSet<String>(2*_set13.size);
          for (int _i14 = 0; _i14 < _set13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.lotameAudienceSet.add(_elem15);
          }
        }
        struct.setLotameAudienceSetIsSet(true);
      }
    }
  }

}

