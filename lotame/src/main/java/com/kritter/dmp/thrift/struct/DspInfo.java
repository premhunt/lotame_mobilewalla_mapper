/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.adserving.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DspInfo implements org.apache.thrift.TBase<DspInfo, DspInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DspInfo");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField ADVINC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("advincId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaignId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField NOFILL_FIELD_DESC = new org.apache.thrift.protocol.TField("nofill", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DspInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DspInfoTupleSchemeFactory());
  }

  public short version; // required
  public int advincId; // optional
  public int campaignId; // optional
  public int adId; // optional
  public double bid; // optional
  /**
   * 
   * @see DspNoFill
   */
  public DspNoFill nofill; // optional
  public String response; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    ADVINC_ID((short)2, "advincId"),
    CAMPAIGN_ID((short)3, "campaignId"),
    AD_ID((short)4, "adId"),
    BID((short)5, "bid"),
    /**
     * 
     * @see DspNoFill
     */
    NOFILL((short)6, "nofill"),
    RESPONSE((short)7, "response");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // ADVINC_ID
          return ADVINC_ID;
        case 3: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 4: // AD_ID
          return AD_ID;
        case 5: // BID
          return BID;
        case 6: // NOFILL
          return NOFILL;
        case 7: // RESPONSE
          return RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __ADVINCID_ISSET_ID = 1;
  private static final int __CAMPAIGNID_ISSET_ID = 2;
  private static final int __ADID_ISSET_ID = 3;
  private static final int __BID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ADVINC_ID,_Fields.CAMPAIGN_ID,_Fields.AD_ID,_Fields.BID,_Fields.NOFILL,_Fields.RESPONSE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.ADVINC_ID, new org.apache.thrift.meta_data.FieldMetaData("advincId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaignId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOFILL, new org.apache.thrift.meta_data.FieldMetaData("nofill", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DspNoFill.class)));
    tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DspInfo.class, metaDataMap);
  }

  public DspInfo() {
    this.version = (short)1;

  }

  public DspInfo(
    short version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DspInfo(DspInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.advincId = other.advincId;
    this.campaignId = other.campaignId;
    this.adId = other.adId;
    this.bid = other.bid;
    if (other.isSetNofill()) {
      this.nofill = other.nofill;
    }
    if (other.isSetResponse()) {
      this.response = other.response;
    }
  }

  public DspInfo deepCopy() {
    return new DspInfo(this);
  }

  @Override
  public void clear() {
    this.version = (short)1;

    setAdvincIdIsSet(false);
    this.advincId = 0;
    setCampaignIdIsSet(false);
    this.campaignId = 0;
    setAdIdIsSet(false);
    this.adId = 0;
    setBidIsSet(false);
    this.bid = 0.0;
    this.nofill = null;
    this.response = null;
  }

  public short getVersion() {
    return this.version;
  }

  public DspInfo setVersion(short version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getAdvincId() {
    return this.advincId;
  }

  public DspInfo setAdvincId(int advincId) {
    this.advincId = advincId;
    setAdvincIdIsSet(true);
    return this;
  }

  public void unsetAdvincId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADVINCID_ISSET_ID);
  }

  /** Returns true if field advincId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdvincId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADVINCID_ISSET_ID);
  }

  public void setAdvincIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADVINCID_ISSET_ID, value);
  }

  public int getCampaignId() {
    return this.campaignId;
  }

  public DspInfo setCampaignId(int campaignId) {
    this.campaignId = campaignId;
    setCampaignIdIsSet(true);
    return this;
  }

  public void unsetCampaignId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  /** Returns true if field campaignId is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaignId() {
    return EncodingUtils.testBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID);
  }

  public void setCampaignIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAMPAIGNID_ISSET_ID, value);
  }

  public int getAdId() {
    return this.adId;
  }

  public DspInfo setAdId(int adId) {
    this.adId = adId;
    setAdIdIsSet(true);
    return this;
  }

  public void unsetAdId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  /** Returns true if field adId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdId() {
    return EncodingUtils.testBit(__isset_bitfield, __ADID_ISSET_ID);
  }

  public void setAdIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ADID_ISSET_ID, value);
  }

  public double getBid() {
    return this.bid;
  }

  public DspInfo setBid(double bid) {
    this.bid = bid;
    setBidIsSet(true);
    return this;
  }

  public void unsetBid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
  }

  /** Returns true if field bid is set (has been assigned a value) and false otherwise */
  public boolean isSetBid() {
    return EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
  }

  public void setBidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
  }

  /**
   * 
   * @see DspNoFill
   */
  public DspNoFill getNofill() {
    return this.nofill;
  }

  /**
   * 
   * @see DspNoFill
   */
  public DspInfo setNofill(DspNoFill nofill) {
    this.nofill = nofill;
    return this;
  }

  public void unsetNofill() {
    this.nofill = null;
  }

  /** Returns true if field nofill is set (has been assigned a value) and false otherwise */
  public boolean isSetNofill() {
    return this.nofill != null;
  }

  public void setNofillIsSet(boolean value) {
    if (!value) {
      this.nofill = null;
    }
  }

  public String getResponse() {
    return this.response;
  }

  public DspInfo setResponse(String response) {
    this.response = response;
    return this;
  }

  public void unsetResponse() {
    this.response = null;
  }

  /** Returns true if field response is set (has been assigned a value) and false otherwise */
  public boolean isSetResponse() {
    return this.response != null;
  }

  public void setResponseIsSet(boolean value) {
    if (!value) {
      this.response = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Short)value);
      }
      break;

    case ADVINC_ID:
      if (value == null) {
        unsetAdvincId();
      } else {
        setAdvincId((Integer)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaignId();
      } else {
        setCampaignId((Integer)value);
      }
      break;

    case AD_ID:
      if (value == null) {
        unsetAdId();
      } else {
        setAdId((Integer)value);
      }
      break;

    case BID:
      if (value == null) {
        unsetBid();
      } else {
        setBid((Double)value);
      }
      break;

    case NOFILL:
      if (value == null) {
        unsetNofill();
      } else {
        setNofill((DspNoFill)value);
      }
      break;

    case RESPONSE:
      if (value == null) {
        unsetResponse();
      } else {
        setResponse((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Short.valueOf(getVersion());

    case ADVINC_ID:
      return Integer.valueOf(getAdvincId());

    case CAMPAIGN_ID:
      return Integer.valueOf(getCampaignId());

    case AD_ID:
      return Integer.valueOf(getAdId());

    case BID:
      return Double.valueOf(getBid());

    case NOFILL:
      return getNofill();

    case RESPONSE:
      return getResponse();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case ADVINC_ID:
      return isSetAdvincId();
    case CAMPAIGN_ID:
      return isSetCampaignId();
    case AD_ID:
      return isSetAdId();
    case BID:
      return isSetBid();
    case NOFILL:
      return isSetNofill();
    case RESPONSE:
      return isSetResponse();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DspInfo)
      return this.equals((DspInfo)that);
    return false;
  }

  public boolean equals(DspInfo that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_advincId = true && this.isSetAdvincId();
    boolean that_present_advincId = true && that.isSetAdvincId();
    if (this_present_advincId || that_present_advincId) {
      if (!(this_present_advincId && that_present_advincId))
        return false;
      if (this.advincId != that.advincId)
        return false;
    }

    boolean this_present_campaignId = true && this.isSetCampaignId();
    boolean that_present_campaignId = true && that.isSetCampaignId();
    if (this_present_campaignId || that_present_campaignId) {
      if (!(this_present_campaignId && that_present_campaignId))
        return false;
      if (this.campaignId != that.campaignId)
        return false;
    }

    boolean this_present_adId = true && this.isSetAdId();
    boolean that_present_adId = true && that.isSetAdId();
    if (this_present_adId || that_present_adId) {
      if (!(this_present_adId && that_present_adId))
        return false;
      if (this.adId != that.adId)
        return false;
    }

    boolean this_present_bid = true && this.isSetBid();
    boolean that_present_bid = true && that.isSetBid();
    if (this_present_bid || that_present_bid) {
      if (!(this_present_bid && that_present_bid))
        return false;
      if (this.bid != that.bid)
        return false;
    }

    boolean this_present_nofill = true && this.isSetNofill();
    boolean that_present_nofill = true && that.isSetNofill();
    if (this_present_nofill || that_present_nofill) {
      if (!(this_present_nofill && that_present_nofill))
        return false;
      if (!this.nofill.equals(that.nofill))
        return false;
    }

    boolean this_present_response = true && this.isSetResponse();
    boolean that_present_response = true && that.isSetResponse();
    if (this_present_response || that_present_response) {
      if (!(this_present_response && that_present_response))
        return false;
      if (!this.response.equals(that.response))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_advincId = true && (isSetAdvincId());
    builder.append(present_advincId);
    if (present_advincId)
      builder.append(advincId);

    boolean present_campaignId = true && (isSetCampaignId());
    builder.append(present_campaignId);
    if (present_campaignId)
      builder.append(campaignId);

    boolean present_adId = true && (isSetAdId());
    builder.append(present_adId);
    if (present_adId)
      builder.append(adId);

    boolean present_bid = true && (isSetBid());
    builder.append(present_bid);
    if (present_bid)
      builder.append(bid);

    boolean present_nofill = true && (isSetNofill());
    builder.append(present_nofill);
    if (present_nofill)
      builder.append(nofill.getValue());

    boolean present_response = true && (isSetResponse());
    builder.append(present_response);
    if (present_response)
      builder.append(response);

    return builder.toHashCode();
  }

  public int compareTo(DspInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DspInfo typedOther = (DspInfo)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdvincId()).compareTo(typedOther.isSetAdvincId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdvincId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.advincId, typedOther.advincId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaignId()).compareTo(typedOther.isSetCampaignId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaignId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaignId, typedOther.campaignId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdId()).compareTo(typedOther.isSetAdId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, typedOther.adId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBid()).compareTo(typedOther.isSetBid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, typedOther.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNofill()).compareTo(typedOther.isSetNofill());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNofill()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nofill, typedOther.nofill);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponse()).compareTo(typedOther.isSetResponse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, typedOther.response);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DspInfo(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetAdvincId()) {
      if (!first) sb.append(", ");
      sb.append("advincId:");
      sb.append(this.advincId);
      first = false;
    }
    if (isSetCampaignId()) {
      if (!first) sb.append(", ");
      sb.append("campaignId:");
      sb.append(this.campaignId);
      first = false;
    }
    if (isSetAdId()) {
      if (!first) sb.append(", ");
      sb.append("adId:");
      sb.append(this.adId);
      first = false;
    }
    if (isSetBid()) {
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
    }
    if (isSetNofill()) {
      if (!first) sb.append(", ");
      sb.append("nofill:");
      if (this.nofill == null) {
        sb.append("null");
      } else {
        sb.append(this.nofill);
      }
      first = false;
    }
    if (isSetResponse()) {
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DspInfoStandardSchemeFactory implements SchemeFactory {
    public DspInfoStandardScheme getScheme() {
      return new DspInfoStandardScheme();
    }
  }

  private static class DspInfoStandardScheme extends StandardScheme<DspInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DspInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.version = iprot.readI16();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADVINC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.advincId = iprot.readI32();
              struct.setAdvincIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.campaignId = iprot.readI32();
              struct.setCampaignIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adId = iprot.readI32();
              struct.setAdIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bid = iprot.readDouble();
              struct.setBidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOFILL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nofill = DspNoFill.findByValue(iprot.readI32());
              struct.setNofillIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESPONSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.response = iprot.readString();
              struct.setResponseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DspInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI16(struct.version);
      oprot.writeFieldEnd();
      if (struct.isSetAdvincId()) {
        oprot.writeFieldBegin(ADVINC_ID_FIELD_DESC);
        oprot.writeI32(struct.advincId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCampaignId()) {
        oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
        oprot.writeI32(struct.campaignId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAdId()) {
        oprot.writeFieldBegin(AD_ID_FIELD_DESC);
        oprot.writeI32(struct.adId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBid()) {
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeDouble(struct.bid);
        oprot.writeFieldEnd();
      }
      if (struct.nofill != null) {
        if (struct.isSetNofill()) {
          oprot.writeFieldBegin(NOFILL_FIELD_DESC);
          oprot.writeI32(struct.nofill.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.response != null) {
        if (struct.isSetResponse()) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          oprot.writeString(struct.response);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DspInfoTupleSchemeFactory implements SchemeFactory {
    public DspInfoTupleScheme getScheme() {
      return new DspInfoTupleScheme();
    }
  }

  private static class DspInfoTupleScheme extends TupleScheme<DspInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DspInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetAdvincId()) {
        optionals.set(1);
      }
      if (struct.isSetCampaignId()) {
        optionals.set(2);
      }
      if (struct.isSetAdId()) {
        optionals.set(3);
      }
      if (struct.isSetBid()) {
        optionals.set(4);
      }
      if (struct.isSetNofill()) {
        optionals.set(5);
      }
      if (struct.isSetResponse()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetVersion()) {
        oprot.writeI16(struct.version);
      }
      if (struct.isSetAdvincId()) {
        oprot.writeI32(struct.advincId);
      }
      if (struct.isSetCampaignId()) {
        oprot.writeI32(struct.campaignId);
      }
      if (struct.isSetAdId()) {
        oprot.writeI32(struct.adId);
      }
      if (struct.isSetBid()) {
        oprot.writeDouble(struct.bid);
      }
      if (struct.isSetNofill()) {
        oprot.writeI32(struct.nofill.getValue());
      }
      if (struct.isSetResponse()) {
        oprot.writeString(struct.response);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DspInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.version = iprot.readI16();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.advincId = iprot.readI32();
        struct.setAdvincIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.campaignId = iprot.readI32();
        struct.setCampaignIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.adId = iprot.readI32();
        struct.setAdIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bid = iprot.readDouble();
        struct.setBidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nofill = DspNoFill.findByValue(iprot.readI32());
        struct.setNofillIsSet(true);
      }
      if (incoming.get(6)) {
        struct.response = iprot.readString();
        struct.setResponseIsSet(true);
      }
    }
  }

}

