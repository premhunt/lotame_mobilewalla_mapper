/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DMP implements org.apache.thrift.TBase<DMP, DMP._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DMP");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField DS_FIELD_DESC = new org.apache.thrift.protocol.TField("ds", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceData", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField GEO_FIELD_DESC = new org.apache.thrift.protocol.TField("geo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("spend", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField METRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("metric", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField DMP_RENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("dmp_render", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField DMP_CLICK_FIELD_DESC = new org.apache.thrift.protocol.TField("dmp_click", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("data_source_event", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField DMP_CONVERSION_FEEDBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("dmp_conversion_feedback", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField DMP_CONVERSION_COOKIE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("dmp_conversion_cookie_not_found", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField USER_SEGMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("userSegment", org.apache.thrift.protocol.TType.STRUCT, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DMPStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DMPTupleSchemeFactory());
  }

  public int version; // required
  public long time; // optional
  public com.kritter.dmp.thrift.struct.UserId userId; // optional
  public com.kritter.dmp.thrift.struct.UserData data; // optional
  /**
   * 
   * @see com.kritter.dmp.thrift.struct.DataSource
   */
  public com.kritter.dmp.thrift.struct.DataSource ds; // optional
  public com.kritter.dmp.thrift.struct.SourceData sourceData; // optional
  public com.kritter.dmp.thrift.struct.Geo geo; // optional
  public com.kritter.dmp.thrift.struct.Spend spend; // optional
  public com.kritter.dmp.thrift.struct.Device device; // optional
  public com.kritter.dmp.thrift.struct.Metric metric; // optional
  public com.kritter.dmp.thrift.struct.Event event; // optional
  public com.kritter.dmp.thrift.struct.DmpRender dmp_render; // optional
  public com.kritter.dmp.thrift.struct.DmpClick dmp_click; // optional
  public com.kritter.dmp.thrift.struct.DataSourceEvent data_source_event; // optional
  public com.kritter.dmp.thrift.struct.DmpConversionFeedback dmp_conversion_feedback; // optional
  public com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound dmp_conversion_cookie_not_found; // optional
  public com.kritter.user.thrift.struct.UserSegment userSegment; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    TIME((short)2, "time"),
    USER_ID((short)3, "userId"),
    DATA((short)4, "data"),
    /**
     * 
     * @see com.kritter.dmp.thrift.struct.DataSource
     */
    DS((short)5, "ds"),
    SOURCE_DATA((short)6, "sourceData"),
    GEO((short)7, "geo"),
    SPEND((short)8, "spend"),
    DEVICE((short)9, "device"),
    METRIC((short)10, "metric"),
    EVENT((short)11, "event"),
    DMP_RENDER((short)12, "dmp_render"),
    DMP_CLICK((short)13, "dmp_click"),
    DATA_SOURCE_EVENT((short)14, "data_source_event"),
    DMP_CONVERSION_FEEDBACK((short)15, "dmp_conversion_feedback"),
    DMP_CONVERSION_COOKIE_NOT_FOUND((short)16, "dmp_conversion_cookie_not_found"),
    USER_SEGMENT((short)17, "userSegment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // TIME
          return TIME;
        case 3: // USER_ID
          return USER_ID;
        case 4: // DATA
          return DATA;
        case 5: // DS
          return DS;
        case 6: // SOURCE_DATA
          return SOURCE_DATA;
        case 7: // GEO
          return GEO;
        case 8: // SPEND
          return SPEND;
        case 9: // DEVICE
          return DEVICE;
        case 10: // METRIC
          return METRIC;
        case 11: // EVENT
          return EVENT;
        case 12: // DMP_RENDER
          return DMP_RENDER;
        case 13: // DMP_CLICK
          return DMP_CLICK;
        case 14: // DATA_SOURCE_EVENT
          return DATA_SOURCE_EVENT;
        case 15: // DMP_CONVERSION_FEEDBACK
          return DMP_CONVERSION_FEEDBACK;
        case 16: // DMP_CONVERSION_COOKIE_NOT_FOUND
          return DMP_CONVERSION_COOKIE_NOT_FOUND;
        case 17: // USER_SEGMENT
          return USER_SEGMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __TIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TIME,_Fields.USER_ID,_Fields.DATA,_Fields.DS,_Fields.SOURCE_DATA,_Fields.GEO,_Fields.SPEND,_Fields.DEVICE,_Fields.METRIC,_Fields.EVENT,_Fields.DMP_RENDER,_Fields.DMP_CLICK,_Fields.DATA_SOURCE_EVENT,_Fields.DMP_CONVERSION_FEEDBACK,_Fields.DMP_CONVERSION_COOKIE_NOT_FOUND,_Fields.USER_SEGMENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.UserId.class)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.UserData.class)));
    tmpMap.put(_Fields.DS, new org.apache.thrift.meta_data.FieldMetaData("ds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.kritter.dmp.thrift.struct.DataSource.class)));
    tmpMap.put(_Fields.SOURCE_DATA, new org.apache.thrift.meta_data.FieldMetaData("sourceData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.SourceData.class)));
    tmpMap.put(_Fields.GEO, new org.apache.thrift.meta_data.FieldMetaData("geo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.Geo.class)));
    tmpMap.put(_Fields.SPEND, new org.apache.thrift.meta_data.FieldMetaData("spend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.Spend.class)));
    tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.Device.class)));
    tmpMap.put(_Fields.METRIC, new org.apache.thrift.meta_data.FieldMetaData("metric", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.Metric.class)));
    tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.Event.class)));
    tmpMap.put(_Fields.DMP_RENDER, new org.apache.thrift.meta_data.FieldMetaData("dmp_render", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.DmpRender.class)));
    tmpMap.put(_Fields.DMP_CLICK, new org.apache.thrift.meta_data.FieldMetaData("dmp_click", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.DmpClick.class)));
    tmpMap.put(_Fields.DATA_SOURCE_EVENT, new org.apache.thrift.meta_data.FieldMetaData("data_source_event", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.DataSourceEvent.class)));
    tmpMap.put(_Fields.DMP_CONVERSION_FEEDBACK, new org.apache.thrift.meta_data.FieldMetaData("dmp_conversion_feedback", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.DmpConversionFeedback.class)));
    tmpMap.put(_Fields.DMP_CONVERSION_COOKIE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("dmp_conversion_cookie_not_found", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound.class)));
    tmpMap.put(_Fields.USER_SEGMENT, new org.apache.thrift.meta_data.FieldMetaData("userSegment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kritter.user.thrift.struct.UserSegment.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DMP.class, metaDataMap);
  }

  public DMP() {
    this.version = 1;

  }

  public DMP(
    int version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DMP(DMP other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.time = other.time;
    if (other.isSetUserId()) {
      this.userId = new com.kritter.dmp.thrift.struct.UserId(other.userId);
    }
    if (other.isSetData()) {
      this.data = new com.kritter.dmp.thrift.struct.UserData(other.data);
    }
    if (other.isSetDs()) {
      this.ds = other.ds;
    }
    if (other.isSetSourceData()) {
      this.sourceData = new com.kritter.dmp.thrift.struct.SourceData(other.sourceData);
    }
    if (other.isSetGeo()) {
      this.geo = new com.kritter.dmp.thrift.struct.Geo(other.geo);
    }
    if (other.isSetSpend()) {
      this.spend = new com.kritter.dmp.thrift.struct.Spend(other.spend);
    }
    if (other.isSetDevice()) {
      this.device = new com.kritter.dmp.thrift.struct.Device(other.device);
    }
    if (other.isSetMetric()) {
      this.metric = new com.kritter.dmp.thrift.struct.Metric(other.metric);
    }
    if (other.isSetEvent()) {
      this.event = new com.kritter.dmp.thrift.struct.Event(other.event);
    }
    if (other.isSetDmp_render()) {
      this.dmp_render = new com.kritter.dmp.thrift.struct.DmpRender(other.dmp_render);
    }
    if (other.isSetDmp_click()) {
      this.dmp_click = new com.kritter.dmp.thrift.struct.DmpClick(other.dmp_click);
    }
    if (other.isSetData_source_event()) {
      this.data_source_event = new com.kritter.dmp.thrift.struct.DataSourceEvent(other.data_source_event);
    }
    if (other.isSetDmp_conversion_feedback()) {
      this.dmp_conversion_feedback = new com.kritter.dmp.thrift.struct.DmpConversionFeedback(other.dmp_conversion_feedback);
    }
    if (other.isSetDmp_conversion_cookie_not_found()) {
      this.dmp_conversion_cookie_not_found = new com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound(other.dmp_conversion_cookie_not_found);
    }
    if (other.isSetUserSegment()) {
      this.userSegment = new com.kritter.user.thrift.struct.UserSegment(other.userSegment);
    }
  }

  public DMP deepCopy() {
    return new DMP(this);
  }

  @Override
  public void clear() {
    this.version = 1;

    setTimeIsSet(false);
    this.time = 0;
    this.userId = null;
    this.data = null;
    this.ds = null;
    this.sourceData = null;
    this.geo = null;
    this.spend = null;
    this.device = null;
    this.metric = null;
    this.event = null;
    this.dmp_render = null;
    this.dmp_click = null;
    this.data_source_event = null;
    this.dmp_conversion_feedback = null;
    this.dmp_conversion_cookie_not_found = null;
    this.userSegment = null;
  }

  public int getVersion() {
    return this.version;
  }

  public DMP setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getTime() {
    return this.time;
  }

  public DMP setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public com.kritter.dmp.thrift.struct.UserId getUserId() {
    return this.userId;
  }

  public DMP setUserId(com.kritter.dmp.thrift.struct.UserId userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public com.kritter.dmp.thrift.struct.UserData getData() {
    return this.data;
  }

  public DMP setData(com.kritter.dmp.thrift.struct.UserData data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  /**
   * 
   * @see com.kritter.dmp.thrift.struct.DataSource
   */
  public com.kritter.dmp.thrift.struct.DataSource getDs() {
    return this.ds;
  }

  /**
   * 
   * @see com.kritter.dmp.thrift.struct.DataSource
   */
  public DMP setDs(com.kritter.dmp.thrift.struct.DataSource ds) {
    this.ds = ds;
    return this;
  }

  public void unsetDs() {
    this.ds = null;
  }

  /** Returns true if field ds is set (has been assigned a value) and false otherwise */
  public boolean isSetDs() {
    return this.ds != null;
  }

  public void setDsIsSet(boolean value) {
    if (!value) {
      this.ds = null;
    }
  }

  public com.kritter.dmp.thrift.struct.SourceData getSourceData() {
    return this.sourceData;
  }

  public DMP setSourceData(com.kritter.dmp.thrift.struct.SourceData sourceData) {
    this.sourceData = sourceData;
    return this;
  }

  public void unsetSourceData() {
    this.sourceData = null;
  }

  /** Returns true if field sourceData is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceData() {
    return this.sourceData != null;
  }

  public void setSourceDataIsSet(boolean value) {
    if (!value) {
      this.sourceData = null;
    }
  }

  public com.kritter.dmp.thrift.struct.Geo getGeo() {
    return this.geo;
  }

  public DMP setGeo(com.kritter.dmp.thrift.struct.Geo geo) {
    this.geo = geo;
    return this;
  }

  public void unsetGeo() {
    this.geo = null;
  }

  /** Returns true if field geo is set (has been assigned a value) and false otherwise */
  public boolean isSetGeo() {
    return this.geo != null;
  }

  public void setGeoIsSet(boolean value) {
    if (!value) {
      this.geo = null;
    }
  }

  public com.kritter.dmp.thrift.struct.Spend getSpend() {
    return this.spend;
  }

  public DMP setSpend(com.kritter.dmp.thrift.struct.Spend spend) {
    this.spend = spend;
    return this;
  }

  public void unsetSpend() {
    this.spend = null;
  }

  /** Returns true if field spend is set (has been assigned a value) and false otherwise */
  public boolean isSetSpend() {
    return this.spend != null;
  }

  public void setSpendIsSet(boolean value) {
    if (!value) {
      this.spend = null;
    }
  }

  public com.kritter.dmp.thrift.struct.Device getDevice() {
    return this.device;
  }

  public DMP setDevice(com.kritter.dmp.thrift.struct.Device device) {
    this.device = device;
    return this;
  }

  public void unsetDevice() {
    this.device = null;
  }

  /** Returns true if field device is set (has been assigned a value) and false otherwise */
  public boolean isSetDevice() {
    return this.device != null;
  }

  public void setDeviceIsSet(boolean value) {
    if (!value) {
      this.device = null;
    }
  }

  public com.kritter.dmp.thrift.struct.Metric getMetric() {
    return this.metric;
  }

  public DMP setMetric(com.kritter.dmp.thrift.struct.Metric metric) {
    this.metric = metric;
    return this;
  }

  public void unsetMetric() {
    this.metric = null;
  }

  /** Returns true if field metric is set (has been assigned a value) and false otherwise */
  public boolean isSetMetric() {
    return this.metric != null;
  }

  public void setMetricIsSet(boolean value) {
    if (!value) {
      this.metric = null;
    }
  }

  public com.kritter.dmp.thrift.struct.Event getEvent() {
    return this.event;
  }

  public DMP setEvent(com.kritter.dmp.thrift.struct.Event event) {
    this.event = event;
    return this;
  }

  public void unsetEvent() {
    this.event = null;
  }

  /** Returns true if field event is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent() {
    return this.event != null;
  }

  public void setEventIsSet(boolean value) {
    if (!value) {
      this.event = null;
    }
  }

  public com.kritter.dmp.thrift.struct.DmpRender getDmp_render() {
    return this.dmp_render;
  }

  public DMP setDmp_render(com.kritter.dmp.thrift.struct.DmpRender dmp_render) {
    this.dmp_render = dmp_render;
    return this;
  }

  public void unsetDmp_render() {
    this.dmp_render = null;
  }

  /** Returns true if field dmp_render is set (has been assigned a value) and false otherwise */
  public boolean isSetDmp_render() {
    return this.dmp_render != null;
  }

  public void setDmp_renderIsSet(boolean value) {
    if (!value) {
      this.dmp_render = null;
    }
  }

  public com.kritter.dmp.thrift.struct.DmpClick getDmp_click() {
    return this.dmp_click;
  }

  public DMP setDmp_click(com.kritter.dmp.thrift.struct.DmpClick dmp_click) {
    this.dmp_click = dmp_click;
    return this;
  }

  public void unsetDmp_click() {
    this.dmp_click = null;
  }

  /** Returns true if field dmp_click is set (has been assigned a value) and false otherwise */
  public boolean isSetDmp_click() {
    return this.dmp_click != null;
  }

  public void setDmp_clickIsSet(boolean value) {
    if (!value) {
      this.dmp_click = null;
    }
  }

  public com.kritter.dmp.thrift.struct.DataSourceEvent getData_source_event() {
    return this.data_source_event;
  }

  public DMP setData_source_event(com.kritter.dmp.thrift.struct.DataSourceEvent data_source_event) {
    this.data_source_event = data_source_event;
    return this;
  }

  public void unsetData_source_event() {
    this.data_source_event = null;
  }

  /** Returns true if field data_source_event is set (has been assigned a value) and false otherwise */
  public boolean isSetData_source_event() {
    return this.data_source_event != null;
  }

  public void setData_source_eventIsSet(boolean value) {
    if (!value) {
      this.data_source_event = null;
    }
  }

  public com.kritter.dmp.thrift.struct.DmpConversionFeedback getDmp_conversion_feedback() {
    return this.dmp_conversion_feedback;
  }

  public DMP setDmp_conversion_feedback(com.kritter.dmp.thrift.struct.DmpConversionFeedback dmp_conversion_feedback) {
    this.dmp_conversion_feedback = dmp_conversion_feedback;
    return this;
  }

  public void unsetDmp_conversion_feedback() {
    this.dmp_conversion_feedback = null;
  }

  /** Returns true if field dmp_conversion_feedback is set (has been assigned a value) and false otherwise */
  public boolean isSetDmp_conversion_feedback() {
    return this.dmp_conversion_feedback != null;
  }

  public void setDmp_conversion_feedbackIsSet(boolean value) {
    if (!value) {
      this.dmp_conversion_feedback = null;
    }
  }

  public com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound getDmp_conversion_cookie_not_found() {
    return this.dmp_conversion_cookie_not_found;
  }

  public DMP setDmp_conversion_cookie_not_found(com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound dmp_conversion_cookie_not_found) {
    this.dmp_conversion_cookie_not_found = dmp_conversion_cookie_not_found;
    return this;
  }

  public void unsetDmp_conversion_cookie_not_found() {
    this.dmp_conversion_cookie_not_found = null;
  }

  /** Returns true if field dmp_conversion_cookie_not_found is set (has been assigned a value) and false otherwise */
  public boolean isSetDmp_conversion_cookie_not_found() {
    return this.dmp_conversion_cookie_not_found != null;
  }

  public void setDmp_conversion_cookie_not_foundIsSet(boolean value) {
    if (!value) {
      this.dmp_conversion_cookie_not_found = null;
    }
  }

  public com.kritter.user.thrift.struct.UserSegment getUserSegment() {
    return this.userSegment;
  }

  public DMP setUserSegment(com.kritter.user.thrift.struct.UserSegment userSegment) {
    this.userSegment = userSegment;
    return this;
  }

  public void unsetUserSegment() {
    this.userSegment = null;
  }

  /** Returns true if field userSegment is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSegment() {
    return this.userSegment != null;
  }

  public void setUserSegmentIsSet(boolean value) {
    if (!value) {
      this.userSegment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((com.kritter.dmp.thrift.struct.UserId)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((com.kritter.dmp.thrift.struct.UserData)value);
      }
      break;

    case DS:
      if (value == null) {
        unsetDs();
      } else {
        setDs((com.kritter.dmp.thrift.struct.DataSource)value);
      }
      break;

    case SOURCE_DATA:
      if (value == null) {
        unsetSourceData();
      } else {
        setSourceData((com.kritter.dmp.thrift.struct.SourceData)value);
      }
      break;

    case GEO:
      if (value == null) {
        unsetGeo();
      } else {
        setGeo((com.kritter.dmp.thrift.struct.Geo)value);
      }
      break;

    case SPEND:
      if (value == null) {
        unsetSpend();
      } else {
        setSpend((com.kritter.dmp.thrift.struct.Spend)value);
      }
      break;

    case DEVICE:
      if (value == null) {
        unsetDevice();
      } else {
        setDevice((com.kritter.dmp.thrift.struct.Device)value);
      }
      break;

    case METRIC:
      if (value == null) {
        unsetMetric();
      } else {
        setMetric((com.kritter.dmp.thrift.struct.Metric)value);
      }
      break;

    case EVENT:
      if (value == null) {
        unsetEvent();
      } else {
        setEvent((com.kritter.dmp.thrift.struct.Event)value);
      }
      break;

    case DMP_RENDER:
      if (value == null) {
        unsetDmp_render();
      } else {
        setDmp_render((com.kritter.dmp.thrift.struct.DmpRender)value);
      }
      break;

    case DMP_CLICK:
      if (value == null) {
        unsetDmp_click();
      } else {
        setDmp_click((com.kritter.dmp.thrift.struct.DmpClick)value);
      }
      break;

    case DATA_SOURCE_EVENT:
      if (value == null) {
        unsetData_source_event();
      } else {
        setData_source_event((com.kritter.dmp.thrift.struct.DataSourceEvent)value);
      }
      break;

    case DMP_CONVERSION_FEEDBACK:
      if (value == null) {
        unsetDmp_conversion_feedback();
      } else {
        setDmp_conversion_feedback((com.kritter.dmp.thrift.struct.DmpConversionFeedback)value);
      }
      break;

    case DMP_CONVERSION_COOKIE_NOT_FOUND:
      if (value == null) {
        unsetDmp_conversion_cookie_not_found();
      } else {
        setDmp_conversion_cookie_not_found((com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound)value);
      }
      break;

    case USER_SEGMENT:
      if (value == null) {
        unsetUserSegment();
      } else {
        setUserSegment((com.kritter.user.thrift.struct.UserSegment)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Integer.valueOf(getVersion());

    case TIME:
      return Long.valueOf(getTime());

    case USER_ID:
      return getUserId();

    case DATA:
      return getData();

    case DS:
      return getDs();

    case SOURCE_DATA:
      return getSourceData();

    case GEO:
      return getGeo();

    case SPEND:
      return getSpend();

    case DEVICE:
      return getDevice();

    case METRIC:
      return getMetric();

    case EVENT:
      return getEvent();

    case DMP_RENDER:
      return getDmp_render();

    case DMP_CLICK:
      return getDmp_click();

    case DATA_SOURCE_EVENT:
      return getData_source_event();

    case DMP_CONVERSION_FEEDBACK:
      return getDmp_conversion_feedback();

    case DMP_CONVERSION_COOKIE_NOT_FOUND:
      return getDmp_conversion_cookie_not_found();

    case USER_SEGMENT:
      return getUserSegment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case TIME:
      return isSetTime();
    case USER_ID:
      return isSetUserId();
    case DATA:
      return isSetData();
    case DS:
      return isSetDs();
    case SOURCE_DATA:
      return isSetSourceData();
    case GEO:
      return isSetGeo();
    case SPEND:
      return isSetSpend();
    case DEVICE:
      return isSetDevice();
    case METRIC:
      return isSetMetric();
    case EVENT:
      return isSetEvent();
    case DMP_RENDER:
      return isSetDmp_render();
    case DMP_CLICK:
      return isSetDmp_click();
    case DATA_SOURCE_EVENT:
      return isSetData_source_event();
    case DMP_CONVERSION_FEEDBACK:
      return isSetDmp_conversion_feedback();
    case DMP_CONVERSION_COOKIE_NOT_FOUND:
      return isSetDmp_conversion_cookie_not_found();
    case USER_SEGMENT:
      return isSetUserSegment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DMP)
      return this.equals((DMP)that);
    return false;
  }

  public boolean equals(DMP that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_ds = true && this.isSetDs();
    boolean that_present_ds = true && that.isSetDs();
    if (this_present_ds || that_present_ds) {
      if (!(this_present_ds && that_present_ds))
        return false;
      if (!this.ds.equals(that.ds))
        return false;
    }

    boolean this_present_sourceData = true && this.isSetSourceData();
    boolean that_present_sourceData = true && that.isSetSourceData();
    if (this_present_sourceData || that_present_sourceData) {
      if (!(this_present_sourceData && that_present_sourceData))
        return false;
      if (!this.sourceData.equals(that.sourceData))
        return false;
    }

    boolean this_present_geo = true && this.isSetGeo();
    boolean that_present_geo = true && that.isSetGeo();
    if (this_present_geo || that_present_geo) {
      if (!(this_present_geo && that_present_geo))
        return false;
      if (!this.geo.equals(that.geo))
        return false;
    }

    boolean this_present_spend = true && this.isSetSpend();
    boolean that_present_spend = true && that.isSetSpend();
    if (this_present_spend || that_present_spend) {
      if (!(this_present_spend && that_present_spend))
        return false;
      if (!this.spend.equals(that.spend))
        return false;
    }

    boolean this_present_device = true && this.isSetDevice();
    boolean that_present_device = true && that.isSetDevice();
    if (this_present_device || that_present_device) {
      if (!(this_present_device && that_present_device))
        return false;
      if (!this.device.equals(that.device))
        return false;
    }

    boolean this_present_metric = true && this.isSetMetric();
    boolean that_present_metric = true && that.isSetMetric();
    if (this_present_metric || that_present_metric) {
      if (!(this_present_metric && that_present_metric))
        return false;
      if (!this.metric.equals(that.metric))
        return false;
    }

    boolean this_present_event = true && this.isSetEvent();
    boolean that_present_event = true && that.isSetEvent();
    if (this_present_event || that_present_event) {
      if (!(this_present_event && that_present_event))
        return false;
      if (!this.event.equals(that.event))
        return false;
    }

    boolean this_present_dmp_render = true && this.isSetDmp_render();
    boolean that_present_dmp_render = true && that.isSetDmp_render();
    if (this_present_dmp_render || that_present_dmp_render) {
      if (!(this_present_dmp_render && that_present_dmp_render))
        return false;
      if (!this.dmp_render.equals(that.dmp_render))
        return false;
    }

    boolean this_present_dmp_click = true && this.isSetDmp_click();
    boolean that_present_dmp_click = true && that.isSetDmp_click();
    if (this_present_dmp_click || that_present_dmp_click) {
      if (!(this_present_dmp_click && that_present_dmp_click))
        return false;
      if (!this.dmp_click.equals(that.dmp_click))
        return false;
    }

    boolean this_present_data_source_event = true && this.isSetData_source_event();
    boolean that_present_data_source_event = true && that.isSetData_source_event();
    if (this_present_data_source_event || that_present_data_source_event) {
      if (!(this_present_data_source_event && that_present_data_source_event))
        return false;
      if (!this.data_source_event.equals(that.data_source_event))
        return false;
    }

    boolean this_present_dmp_conversion_feedback = true && this.isSetDmp_conversion_feedback();
    boolean that_present_dmp_conversion_feedback = true && that.isSetDmp_conversion_feedback();
    if (this_present_dmp_conversion_feedback || that_present_dmp_conversion_feedback) {
      if (!(this_present_dmp_conversion_feedback && that_present_dmp_conversion_feedback))
        return false;
      if (!this.dmp_conversion_feedback.equals(that.dmp_conversion_feedback))
        return false;
    }

    boolean this_present_dmp_conversion_cookie_not_found = true && this.isSetDmp_conversion_cookie_not_found();
    boolean that_present_dmp_conversion_cookie_not_found = true && that.isSetDmp_conversion_cookie_not_found();
    if (this_present_dmp_conversion_cookie_not_found || that_present_dmp_conversion_cookie_not_found) {
      if (!(this_present_dmp_conversion_cookie_not_found && that_present_dmp_conversion_cookie_not_found))
        return false;
      if (!this.dmp_conversion_cookie_not_found.equals(that.dmp_conversion_cookie_not_found))
        return false;
    }

    boolean this_present_userSegment = true && this.isSetUserSegment();
    boolean that_present_userSegment = true && that.isSetUserSegment();
    if (this_present_userSegment || that_present_userSegment) {
      if (!(this_present_userSegment && that_present_userSegment))
        return false;
      if (!this.userSegment.equals(that.userSegment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_time = true && (isSetTime());
    builder.append(present_time);
    if (present_time)
      builder.append(time);

    boolean present_userId = true && (isSetUserId());
    builder.append(present_userId);
    if (present_userId)
      builder.append(userId);

    boolean present_data = true && (isSetData());
    builder.append(present_data);
    if (present_data)
      builder.append(data);

    boolean present_ds = true && (isSetDs());
    builder.append(present_ds);
    if (present_ds)
      builder.append(ds.getValue());

    boolean present_sourceData = true && (isSetSourceData());
    builder.append(present_sourceData);
    if (present_sourceData)
      builder.append(sourceData);

    boolean present_geo = true && (isSetGeo());
    builder.append(present_geo);
    if (present_geo)
      builder.append(geo);

    boolean present_spend = true && (isSetSpend());
    builder.append(present_spend);
    if (present_spend)
      builder.append(spend);

    boolean present_device = true && (isSetDevice());
    builder.append(present_device);
    if (present_device)
      builder.append(device);

    boolean present_metric = true && (isSetMetric());
    builder.append(present_metric);
    if (present_metric)
      builder.append(metric);

    boolean present_event = true && (isSetEvent());
    builder.append(present_event);
    if (present_event)
      builder.append(event);

    boolean present_dmp_render = true && (isSetDmp_render());
    builder.append(present_dmp_render);
    if (present_dmp_render)
      builder.append(dmp_render);

    boolean present_dmp_click = true && (isSetDmp_click());
    builder.append(present_dmp_click);
    if (present_dmp_click)
      builder.append(dmp_click);

    boolean present_data_source_event = true && (isSetData_source_event());
    builder.append(present_data_source_event);
    if (present_data_source_event)
      builder.append(data_source_event);

    boolean present_dmp_conversion_feedback = true && (isSetDmp_conversion_feedback());
    builder.append(present_dmp_conversion_feedback);
    if (present_dmp_conversion_feedback)
      builder.append(dmp_conversion_feedback);

    boolean present_dmp_conversion_cookie_not_found = true && (isSetDmp_conversion_cookie_not_found());
    builder.append(present_dmp_conversion_cookie_not_found);
    if (present_dmp_conversion_cookie_not_found)
      builder.append(dmp_conversion_cookie_not_found);

    boolean present_userSegment = true && (isSetUserSegment());
    builder.append(present_userSegment);
    if (present_userSegment)
      builder.append(userSegment);

    return builder.toHashCode();
  }

  public int compareTo(DMP other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DMP typedOther = (DMP)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDs()).compareTo(typedOther.isSetDs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ds, typedOther.ds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceData()).compareTo(typedOther.isSetSourceData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceData, typedOther.sourceData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGeo()).compareTo(typedOther.isSetGeo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGeo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.geo, typedOther.geo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpend()).compareTo(typedOther.isSetSpend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spend, typedOther.spend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDevice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetric()).compareTo(typedOther.isSetMetric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metric, typedOther.metric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvent()).compareTo(typedOther.isSetEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, typedOther.event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDmp_render()).compareTo(typedOther.isSetDmp_render());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmp_render()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmp_render, typedOther.dmp_render);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDmp_click()).compareTo(typedOther.isSetDmp_click());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmp_click()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmp_click, typedOther.dmp_click);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData_source_event()).compareTo(typedOther.isSetData_source_event());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_source_event()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_source_event, typedOther.data_source_event);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDmp_conversion_feedback()).compareTo(typedOther.isSetDmp_conversion_feedback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmp_conversion_feedback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmp_conversion_feedback, typedOther.dmp_conversion_feedback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDmp_conversion_cookie_not_found()).compareTo(typedOther.isSetDmp_conversion_cookie_not_found());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDmp_conversion_cookie_not_found()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmp_conversion_cookie_not_found, typedOther.dmp_conversion_cookie_not_found);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserSegment()).compareTo(typedOther.isSetUserSegment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSegment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSegment, typedOther.userSegment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DMP(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
    }
    if (isSetDs()) {
      if (!first) sb.append(", ");
      sb.append("ds:");
      if (this.ds == null) {
        sb.append("null");
      } else {
        sb.append(this.ds);
      }
      first = false;
    }
    if (isSetSourceData()) {
      if (!first) sb.append(", ");
      sb.append("sourceData:");
      if (this.sourceData == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceData);
      }
      first = false;
    }
    if (isSetGeo()) {
      if (!first) sb.append(", ");
      sb.append("geo:");
      if (this.geo == null) {
        sb.append("null");
      } else {
        sb.append(this.geo);
      }
      first = false;
    }
    if (isSetSpend()) {
      if (!first) sb.append(", ");
      sb.append("spend:");
      if (this.spend == null) {
        sb.append("null");
      } else {
        sb.append(this.spend);
      }
      first = false;
    }
    if (isSetDevice()) {
      if (!first) sb.append(", ");
      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
    }
    if (isSetMetric()) {
      if (!first) sb.append(", ");
      sb.append("metric:");
      if (this.metric == null) {
        sb.append("null");
      } else {
        sb.append(this.metric);
      }
      first = false;
    }
    if (isSetEvent()) {
      if (!first) sb.append(", ");
      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
    }
    if (isSetDmp_render()) {
      if (!first) sb.append(", ");
      sb.append("dmp_render:");
      if (this.dmp_render == null) {
        sb.append("null");
      } else {
        sb.append(this.dmp_render);
      }
      first = false;
    }
    if (isSetDmp_click()) {
      if (!first) sb.append(", ");
      sb.append("dmp_click:");
      if (this.dmp_click == null) {
        sb.append("null");
      } else {
        sb.append(this.dmp_click);
      }
      first = false;
    }
    if (isSetData_source_event()) {
      if (!first) sb.append(", ");
      sb.append("data_source_event:");
      if (this.data_source_event == null) {
        sb.append("null");
      } else {
        sb.append(this.data_source_event);
      }
      first = false;
    }
    if (isSetDmp_conversion_feedback()) {
      if (!first) sb.append(", ");
      sb.append("dmp_conversion_feedback:");
      if (this.dmp_conversion_feedback == null) {
        sb.append("null");
      } else {
        sb.append(this.dmp_conversion_feedback);
      }
      first = false;
    }
    if (isSetDmp_conversion_cookie_not_found()) {
      if (!first) sb.append(", ");
      sb.append("dmp_conversion_cookie_not_found:");
      if (this.dmp_conversion_cookie_not_found == null) {
        sb.append("null");
      } else {
        sb.append(this.dmp_conversion_cookie_not_found);
      }
      first = false;
    }
    if (isSetUserSegment()) {
      if (!first) sb.append(", ");
      sb.append("userSegment:");
      if (this.userSegment == null) {
        sb.append("null");
      } else {
        sb.append(this.userSegment);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (userId != null) {
      userId.validate();
    }
    if (data != null) {
      data.validate();
    }
    if (sourceData != null) {
      sourceData.validate();
    }
    if (geo != null) {
      geo.validate();
    }
    if (spend != null) {
      spend.validate();
    }
    if (device != null) {
      device.validate();
    }
    if (metric != null) {
      metric.validate();
    }
    if (event != null) {
      event.validate();
    }
    if (dmp_render != null) {
      dmp_render.validate();
    }
    if (dmp_click != null) {
      dmp_click.validate();
    }
    if (data_source_event != null) {
      data_source_event.validate();
    }
    if (dmp_conversion_feedback != null) {
      dmp_conversion_feedback.validate();
    }
    if (dmp_conversion_cookie_not_found != null) {
      dmp_conversion_cookie_not_found.validate();
    }
    if (userSegment != null) {
      userSegment.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DMPStandardSchemeFactory implements SchemeFactory {
    public DMPStandardScheme getScheme() {
      return new DMPStandardScheme();
    }
  }

  private static class DMPStandardScheme extends StandardScheme<DMP> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DMP struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userId = new com.kritter.dmp.thrift.struct.UserId();
              struct.userId.read(iprot);
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data = new com.kritter.dmp.thrift.struct.UserData();
              struct.data.read(iprot);
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ds = com.kritter.dmp.thrift.struct.DataSource.findByValue(iprot.readI32());
              struct.setDsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sourceData = new com.kritter.dmp.thrift.struct.SourceData();
              struct.sourceData.read(iprot);
              struct.setSourceDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // GEO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.geo = new com.kritter.dmp.thrift.struct.Geo();
              struct.geo.read(iprot);
              struct.setGeoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spend = new com.kritter.dmp.thrift.struct.Spend();
              struct.spend.read(iprot);
              struct.setSpendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEVICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.device = new com.kritter.dmp.thrift.struct.Device();
              struct.device.read(iprot);
              struct.setDeviceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // METRIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metric = new com.kritter.dmp.thrift.struct.Metric();
              struct.metric.read(iprot);
              struct.setMetricIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.event = new com.kritter.dmp.thrift.struct.Event();
              struct.event.read(iprot);
              struct.setEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DMP_RENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dmp_render = new com.kritter.dmp.thrift.struct.DmpRender();
              struct.dmp_render.read(iprot);
              struct.setDmp_renderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DMP_CLICK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dmp_click = new com.kritter.dmp.thrift.struct.DmpClick();
              struct.dmp_click.read(iprot);
              struct.setDmp_clickIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DATA_SOURCE_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.data_source_event = new com.kritter.dmp.thrift.struct.DataSourceEvent();
              struct.data_source_event.read(iprot);
              struct.setData_source_eventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DMP_CONVERSION_FEEDBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dmp_conversion_feedback = new com.kritter.dmp.thrift.struct.DmpConversionFeedback();
              struct.dmp_conversion_feedback.read(iprot);
              struct.setDmp_conversion_feedbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DMP_CONVERSION_COOKIE_NOT_FOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dmp_conversion_cookie_not_found = new com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound();
              struct.dmp_conversion_cookie_not_found.read(iprot);
              struct.setDmp_conversion_cookie_not_foundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // USER_SEGMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userSegment = new com.kritter.user.thrift.struct.UserSegment();
              struct.userSegment.read(iprot);
              struct.setUserSegmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DMP struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(struct.version);
      oprot.writeFieldEnd();
      if (struct.isSetTime()) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          struct.userId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ds != null) {
        if (struct.isSetDs()) {
          oprot.writeFieldBegin(DS_FIELD_DESC);
          oprot.writeI32(struct.ds.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceData != null) {
        if (struct.isSetSourceData()) {
          oprot.writeFieldBegin(SOURCE_DATA_FIELD_DESC);
          struct.sourceData.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.geo != null) {
        if (struct.isSetGeo()) {
          oprot.writeFieldBegin(GEO_FIELD_DESC);
          struct.geo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.spend != null) {
        if (struct.isSetSpend()) {
          oprot.writeFieldBegin(SPEND_FIELD_DESC);
          struct.spend.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.device != null) {
        if (struct.isSetDevice()) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.metric != null) {
        if (struct.isSetMetric()) {
          oprot.writeFieldBegin(METRIC_FIELD_DESC);
          struct.metric.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.event != null) {
        if (struct.isSetEvent()) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          struct.event.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dmp_render != null) {
        if (struct.isSetDmp_render()) {
          oprot.writeFieldBegin(DMP_RENDER_FIELD_DESC);
          struct.dmp_render.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dmp_click != null) {
        if (struct.isSetDmp_click()) {
          oprot.writeFieldBegin(DMP_CLICK_FIELD_DESC);
          struct.dmp_click.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_source_event != null) {
        if (struct.isSetData_source_event()) {
          oprot.writeFieldBegin(DATA_SOURCE_EVENT_FIELD_DESC);
          struct.data_source_event.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dmp_conversion_feedback != null) {
        if (struct.isSetDmp_conversion_feedback()) {
          oprot.writeFieldBegin(DMP_CONVERSION_FEEDBACK_FIELD_DESC);
          struct.dmp_conversion_feedback.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dmp_conversion_cookie_not_found != null) {
        if (struct.isSetDmp_conversion_cookie_not_found()) {
          oprot.writeFieldBegin(DMP_CONVERSION_COOKIE_NOT_FOUND_FIELD_DESC);
          struct.dmp_conversion_cookie_not_found.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userSegment != null) {
        if (struct.isSetUserSegment()) {
          oprot.writeFieldBegin(USER_SEGMENT_FIELD_DESC);
          struct.userSegment.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DMPTupleSchemeFactory implements SchemeFactory {
    public DMPTupleScheme getScheme() {
      return new DMPTupleScheme();
    }
  }

  private static class DMPTupleScheme extends TupleScheme<DMP> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DMP struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetTime()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetData()) {
        optionals.set(3);
      }
      if (struct.isSetDs()) {
        optionals.set(4);
      }
      if (struct.isSetSourceData()) {
        optionals.set(5);
      }
      if (struct.isSetGeo()) {
        optionals.set(6);
      }
      if (struct.isSetSpend()) {
        optionals.set(7);
      }
      if (struct.isSetDevice()) {
        optionals.set(8);
      }
      if (struct.isSetMetric()) {
        optionals.set(9);
      }
      if (struct.isSetEvent()) {
        optionals.set(10);
      }
      if (struct.isSetDmp_render()) {
        optionals.set(11);
      }
      if (struct.isSetDmp_click()) {
        optionals.set(12);
      }
      if (struct.isSetData_source_event()) {
        optionals.set(13);
      }
      if (struct.isSetDmp_conversion_feedback()) {
        optionals.set(14);
      }
      if (struct.isSetDmp_conversion_cookie_not_found()) {
        optionals.set(15);
      }
      if (struct.isSetUserSegment()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetUserId()) {
        struct.userId.write(oprot);
      }
      if (struct.isSetData()) {
        struct.data.write(oprot);
      }
      if (struct.isSetDs()) {
        oprot.writeI32(struct.ds.getValue());
      }
      if (struct.isSetSourceData()) {
        struct.sourceData.write(oprot);
      }
      if (struct.isSetGeo()) {
        struct.geo.write(oprot);
      }
      if (struct.isSetSpend()) {
        struct.spend.write(oprot);
      }
      if (struct.isSetDevice()) {
        struct.device.write(oprot);
      }
      if (struct.isSetMetric()) {
        struct.metric.write(oprot);
      }
      if (struct.isSetEvent()) {
        struct.event.write(oprot);
      }
      if (struct.isSetDmp_render()) {
        struct.dmp_render.write(oprot);
      }
      if (struct.isSetDmp_click()) {
        struct.dmp_click.write(oprot);
      }
      if (struct.isSetData_source_event()) {
        struct.data_source_event.write(oprot);
      }
      if (struct.isSetDmp_conversion_feedback()) {
        struct.dmp_conversion_feedback.write(oprot);
      }
      if (struct.isSetDmp_conversion_cookie_not_found()) {
        struct.dmp_conversion_cookie_not_found.write(oprot);
      }
      if (struct.isSetUserSegment()) {
        struct.userSegment.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DMP struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = new com.kritter.dmp.thrift.struct.UserId();
        struct.userId.read(iprot);
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.data = new com.kritter.dmp.thrift.struct.UserData();
        struct.data.read(iprot);
        struct.setDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ds = com.kritter.dmp.thrift.struct.DataSource.findByValue(iprot.readI32());
        struct.setDsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sourceData = new com.kritter.dmp.thrift.struct.SourceData();
        struct.sourceData.read(iprot);
        struct.setSourceDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.geo = new com.kritter.dmp.thrift.struct.Geo();
        struct.geo.read(iprot);
        struct.setGeoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.spend = new com.kritter.dmp.thrift.struct.Spend();
        struct.spend.read(iprot);
        struct.setSpendIsSet(true);
      }
      if (incoming.get(8)) {
        struct.device = new com.kritter.dmp.thrift.struct.Device();
        struct.device.read(iprot);
        struct.setDeviceIsSet(true);
      }
      if (incoming.get(9)) {
        struct.metric = new com.kritter.dmp.thrift.struct.Metric();
        struct.metric.read(iprot);
        struct.setMetricIsSet(true);
      }
      if (incoming.get(10)) {
        struct.event = new com.kritter.dmp.thrift.struct.Event();
        struct.event.read(iprot);
        struct.setEventIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dmp_render = new com.kritter.dmp.thrift.struct.DmpRender();
        struct.dmp_render.read(iprot);
        struct.setDmp_renderIsSet(true);
      }
      if (incoming.get(12)) {
        struct.dmp_click = new com.kritter.dmp.thrift.struct.DmpClick();
        struct.dmp_click.read(iprot);
        struct.setDmp_clickIsSet(true);
      }
      if (incoming.get(13)) {
        struct.data_source_event = new com.kritter.dmp.thrift.struct.DataSourceEvent();
        struct.data_source_event.read(iprot);
        struct.setData_source_eventIsSet(true);
      }
      if (incoming.get(14)) {
        struct.dmp_conversion_feedback = new com.kritter.dmp.thrift.struct.DmpConversionFeedback();
        struct.dmp_conversion_feedback.read(iprot);
        struct.setDmp_conversion_feedbackIsSet(true);
      }
      if (incoming.get(15)) {
        struct.dmp_conversion_cookie_not_found = new com.kritter.dmp.thrift.struct.DmpConversionCookieNotFound();
        struct.dmp_conversion_cookie_not_found.read(iprot);
        struct.setDmp_conversion_cookie_not_foundIsSet(true);
      }
      if (incoming.get(16)) {
        struct.userSegment = new com.kritter.user.thrift.struct.UserSegment();
        struct.userSegment.read(iprot);
        struct.setUserSegmentIsSet(true);
      }
    }
  }

}

