/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Metric implements org.apache.thrift.TBase<Metric, Metric._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Metric");

  private static final org.apache.thrift.protocol.TField DWELL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("dwell_time", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RECENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("recency", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VISIT_FREQUENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("visit_frequency", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SPEND_FIELD_DESC = new org.apache.thrift.protocol.TField("spend", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MetricStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MetricTupleSchemeFactory());
  }

  public int dwell_time; // optional
  public int recency; // optional
  public int visit_frequency; // optional
  public int spend; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DWELL_TIME((short)1, "dwell_time"),
    RECENCY((short)2, "recency"),
    VISIT_FREQUENCY((short)3, "visit_frequency"),
    SPEND((short)4, "spend");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DWELL_TIME
          return DWELL_TIME;
        case 2: // RECENCY
          return RECENCY;
        case 3: // VISIT_FREQUENCY
          return VISIT_FREQUENCY;
        case 4: // SPEND
          return SPEND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DWELL_TIME_ISSET_ID = 0;
  private static final int __RECENCY_ISSET_ID = 1;
  private static final int __VISIT_FREQUENCY_ISSET_ID = 2;
  private static final int __SPEND_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DWELL_TIME,_Fields.RECENCY,_Fields.VISIT_FREQUENCY,_Fields.SPEND};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DWELL_TIME, new org.apache.thrift.meta_data.FieldMetaData("dwell_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECENCY, new org.apache.thrift.meta_data.FieldMetaData("recency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VISIT_FREQUENCY, new org.apache.thrift.meta_data.FieldMetaData("visit_frequency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEND, new org.apache.thrift.meta_data.FieldMetaData("spend", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Metric.class, metaDataMap);
  }

  public Metric() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Metric(Metric other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dwell_time = other.dwell_time;
    this.recency = other.recency;
    this.visit_frequency = other.visit_frequency;
    this.spend = other.spend;
  }

  public Metric deepCopy() {
    return new Metric(this);
  }

  @Override
  public void clear() {
    setDwell_timeIsSet(false);
    this.dwell_time = 0;
    setRecencyIsSet(false);
    this.recency = 0;
    setVisit_frequencyIsSet(false);
    this.visit_frequency = 0;
    setSpendIsSet(false);
    this.spend = 0;
  }

  public int getDwell_time() {
    return this.dwell_time;
  }

  public Metric setDwell_time(int dwell_time) {
    this.dwell_time = dwell_time;
    setDwell_timeIsSet(true);
    return this;
  }

  public void unsetDwell_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DWELL_TIME_ISSET_ID);
  }

  /** Returns true if field dwell_time is set (has been assigned a value) and false otherwise */
  public boolean isSetDwell_time() {
    return EncodingUtils.testBit(__isset_bitfield, __DWELL_TIME_ISSET_ID);
  }

  public void setDwell_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DWELL_TIME_ISSET_ID, value);
  }

  public int getRecency() {
    return this.recency;
  }

  public Metric setRecency(int recency) {
    this.recency = recency;
    setRecencyIsSet(true);
    return this;
  }

  public void unsetRecency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECENCY_ISSET_ID);
  }

  /** Returns true if field recency is set (has been assigned a value) and false otherwise */
  public boolean isSetRecency() {
    return EncodingUtils.testBit(__isset_bitfield, __RECENCY_ISSET_ID);
  }

  public void setRecencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECENCY_ISSET_ID, value);
  }

  public int getVisit_frequency() {
    return this.visit_frequency;
  }

  public Metric setVisit_frequency(int visit_frequency) {
    this.visit_frequency = visit_frequency;
    setVisit_frequencyIsSet(true);
    return this;
  }

  public void unsetVisit_frequency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VISIT_FREQUENCY_ISSET_ID);
  }

  /** Returns true if field visit_frequency is set (has been assigned a value) and false otherwise */
  public boolean isSetVisit_frequency() {
    return EncodingUtils.testBit(__isset_bitfield, __VISIT_FREQUENCY_ISSET_ID);
  }

  public void setVisit_frequencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VISIT_FREQUENCY_ISSET_ID, value);
  }

  public int getSpend() {
    return this.spend;
  }

  public Metric setSpend(int spend) {
    this.spend = spend;
    setSpendIsSet(true);
    return this;
  }

  public void unsetSpend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPEND_ISSET_ID);
  }

  /** Returns true if field spend is set (has been assigned a value) and false otherwise */
  public boolean isSetSpend() {
    return EncodingUtils.testBit(__isset_bitfield, __SPEND_ISSET_ID);
  }

  public void setSpendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPEND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DWELL_TIME:
      if (value == null) {
        unsetDwell_time();
      } else {
        setDwell_time((Integer)value);
      }
      break;

    case RECENCY:
      if (value == null) {
        unsetRecency();
      } else {
        setRecency((Integer)value);
      }
      break;

    case VISIT_FREQUENCY:
      if (value == null) {
        unsetVisit_frequency();
      } else {
        setVisit_frequency((Integer)value);
      }
      break;

    case SPEND:
      if (value == null) {
        unsetSpend();
      } else {
        setSpend((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DWELL_TIME:
      return Integer.valueOf(getDwell_time());

    case RECENCY:
      return Integer.valueOf(getRecency());

    case VISIT_FREQUENCY:
      return Integer.valueOf(getVisit_frequency());

    case SPEND:
      return Integer.valueOf(getSpend());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DWELL_TIME:
      return isSetDwell_time();
    case RECENCY:
      return isSetRecency();
    case VISIT_FREQUENCY:
      return isSetVisit_frequency();
    case SPEND:
      return isSetSpend();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Metric)
      return this.equals((Metric)that);
    return false;
  }

  public boolean equals(Metric that) {
    if (that == null)
      return false;

    boolean this_present_dwell_time = true && this.isSetDwell_time();
    boolean that_present_dwell_time = true && that.isSetDwell_time();
    if (this_present_dwell_time || that_present_dwell_time) {
      if (!(this_present_dwell_time && that_present_dwell_time))
        return false;
      if (this.dwell_time != that.dwell_time)
        return false;
    }

    boolean this_present_recency = true && this.isSetRecency();
    boolean that_present_recency = true && that.isSetRecency();
    if (this_present_recency || that_present_recency) {
      if (!(this_present_recency && that_present_recency))
        return false;
      if (this.recency != that.recency)
        return false;
    }

    boolean this_present_visit_frequency = true && this.isSetVisit_frequency();
    boolean that_present_visit_frequency = true && that.isSetVisit_frequency();
    if (this_present_visit_frequency || that_present_visit_frequency) {
      if (!(this_present_visit_frequency && that_present_visit_frequency))
        return false;
      if (this.visit_frequency != that.visit_frequency)
        return false;
    }

    boolean this_present_spend = true && this.isSetSpend();
    boolean that_present_spend = true && that.isSetSpend();
    if (this_present_spend || that_present_spend) {
      if (!(this_present_spend && that_present_spend))
        return false;
      if (this.spend != that.spend)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_dwell_time = true && (isSetDwell_time());
    builder.append(present_dwell_time);
    if (present_dwell_time)
      builder.append(dwell_time);

    boolean present_recency = true && (isSetRecency());
    builder.append(present_recency);
    if (present_recency)
      builder.append(recency);

    boolean present_visit_frequency = true && (isSetVisit_frequency());
    builder.append(present_visit_frequency);
    if (present_visit_frequency)
      builder.append(visit_frequency);

    boolean present_spend = true && (isSetSpend());
    builder.append(present_spend);
    if (present_spend)
      builder.append(spend);

    return builder.toHashCode();
  }

  public int compareTo(Metric other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Metric typedOther = (Metric)other;

    lastComparison = Boolean.valueOf(isSetDwell_time()).compareTo(typedOther.isSetDwell_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDwell_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dwell_time, typedOther.dwell_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecency()).compareTo(typedOther.isSetRecency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recency, typedOther.recency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisit_frequency()).compareTo(typedOther.isSetVisit_frequency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisit_frequency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visit_frequency, typedOther.visit_frequency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpend()).compareTo(typedOther.isSetSpend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spend, typedOther.spend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Metric(");
    boolean first = true;

    if (isSetDwell_time()) {
      sb.append("dwell_time:");
      sb.append(this.dwell_time);
      first = false;
    }
    if (isSetRecency()) {
      if (!first) sb.append(", ");
      sb.append("recency:");
      sb.append(this.recency);
      first = false;
    }
    if (isSetVisit_frequency()) {
      if (!first) sb.append(", ");
      sb.append("visit_frequency:");
      sb.append(this.visit_frequency);
      first = false;
    }
    if (isSetSpend()) {
      if (!first) sb.append(", ");
      sb.append("spend:");
      sb.append(this.spend);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MetricStandardSchemeFactory implements SchemeFactory {
    public MetricStandardScheme getScheme() {
      return new MetricStandardScheme();
    }
  }

  private static class MetricStandardScheme extends StandardScheme<Metric> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Metric struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DWELL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dwell_time = iprot.readI32();
              struct.setDwell_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recency = iprot.readI32();
              struct.setRecencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VISIT_FREQUENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.visit_frequency = iprot.readI32();
              struct.setVisit_frequencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spend = iprot.readI32();
              struct.setSpendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Metric struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDwell_time()) {
        oprot.writeFieldBegin(DWELL_TIME_FIELD_DESC);
        oprot.writeI32(struct.dwell_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecency()) {
        oprot.writeFieldBegin(RECENCY_FIELD_DESC);
        oprot.writeI32(struct.recency);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVisit_frequency()) {
        oprot.writeFieldBegin(VISIT_FREQUENCY_FIELD_DESC);
        oprot.writeI32(struct.visit_frequency);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpend()) {
        oprot.writeFieldBegin(SPEND_FIELD_DESC);
        oprot.writeI32(struct.spend);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MetricTupleSchemeFactory implements SchemeFactory {
    public MetricTupleScheme getScheme() {
      return new MetricTupleScheme();
    }
  }

  private static class MetricTupleScheme extends TupleScheme<Metric> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Metric struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDwell_time()) {
        optionals.set(0);
      }
      if (struct.isSetRecency()) {
        optionals.set(1);
      }
      if (struct.isSetVisit_frequency()) {
        optionals.set(2);
      }
      if (struct.isSetSpend()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDwell_time()) {
        oprot.writeI32(struct.dwell_time);
      }
      if (struct.isSetRecency()) {
        oprot.writeI32(struct.recency);
      }
      if (struct.isSetVisit_frequency()) {
        oprot.writeI32(struct.visit_frequency);
      }
      if (struct.isSetSpend()) {
        oprot.writeI32(struct.spend);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Metric struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.dwell_time = iprot.readI32();
        struct.setDwell_timeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.recency = iprot.readI32();
        struct.setRecencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.visit_frequency = iprot.readI32();
        struct.setVisit_frequencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.spend = iprot.readI32();
        struct.setSpendIsSet(true);
      }
    }
  }

}

