/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DmpClick implements org.apache.thrift.TBase<DmpClick, DmpClick._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DmpClick");

  private static final org.apache.thrift.protocol.TField ADV_INC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adv_inc_id", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField CAMPAIGN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("campaign_id", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ad_id", org.apache.thrift.protocol.TType.SET, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DmpClickStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DmpClickTupleSchemeFactory());
  }

  public Set<Integer> adv_inc_id; // optional
  public Set<Integer> campaign_id; // optional
  public Set<Integer> ad_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADV_INC_ID((short)1, "adv_inc_id"),
    CAMPAIGN_ID((short)2, "campaign_id"),
    AD_ID((short)3, "ad_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADV_INC_ID
          return ADV_INC_ID;
        case 2: // CAMPAIGN_ID
          return CAMPAIGN_ID;
        case 3: // AD_ID
          return AD_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ADV_INC_ID,_Fields.CAMPAIGN_ID,_Fields.AD_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADV_INC_ID, new org.apache.thrift.meta_data.FieldMetaData("adv_inc_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAMPAIGN_ID, new org.apache.thrift.meta_data.FieldMetaData("campaign_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("ad_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DmpClick.class, metaDataMap);
  }

  public DmpClick() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DmpClick(DmpClick other) {
    if (other.isSetAdv_inc_id()) {
      Set<Integer> __this__adv_inc_id = new HashSet<Integer>();
      for (Integer other_element : other.adv_inc_id) {
        __this__adv_inc_id.add(other_element);
      }
      this.adv_inc_id = __this__adv_inc_id;
    }
    if (other.isSetCampaign_id()) {
      Set<Integer> __this__campaign_id = new HashSet<Integer>();
      for (Integer other_element : other.campaign_id) {
        __this__campaign_id.add(other_element);
      }
      this.campaign_id = __this__campaign_id;
    }
    if (other.isSetAd_id()) {
      Set<Integer> __this__ad_id = new HashSet<Integer>();
      for (Integer other_element : other.ad_id) {
        __this__ad_id.add(other_element);
      }
      this.ad_id = __this__ad_id;
    }
  }

  public DmpClick deepCopy() {
    return new DmpClick(this);
  }

  @Override
  public void clear() {
    this.adv_inc_id = null;
    this.campaign_id = null;
    this.ad_id = null;
  }

  public int getAdv_inc_idSize() {
    return (this.adv_inc_id == null) ? 0 : this.adv_inc_id.size();
  }

  public java.util.Iterator<Integer> getAdv_inc_idIterator() {
    return (this.adv_inc_id == null) ? null : this.adv_inc_id.iterator();
  }

  public void addToAdv_inc_id(int elem) {
    if (this.adv_inc_id == null) {
      this.adv_inc_id = new HashSet<Integer>();
    }
    this.adv_inc_id.add(elem);
  }

  public Set<Integer> getAdv_inc_id() {
    return this.adv_inc_id;
  }

  public DmpClick setAdv_inc_id(Set<Integer> adv_inc_id) {
    this.adv_inc_id = adv_inc_id;
    return this;
  }

  public void unsetAdv_inc_id() {
    this.adv_inc_id = null;
  }

  /** Returns true if field adv_inc_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAdv_inc_id() {
    return this.adv_inc_id != null;
  }

  public void setAdv_inc_idIsSet(boolean value) {
    if (!value) {
      this.adv_inc_id = null;
    }
  }

  public int getCampaign_idSize() {
    return (this.campaign_id == null) ? 0 : this.campaign_id.size();
  }

  public java.util.Iterator<Integer> getCampaign_idIterator() {
    return (this.campaign_id == null) ? null : this.campaign_id.iterator();
  }

  public void addToCampaign_id(int elem) {
    if (this.campaign_id == null) {
      this.campaign_id = new HashSet<Integer>();
    }
    this.campaign_id.add(elem);
  }

  public Set<Integer> getCampaign_id() {
    return this.campaign_id;
  }

  public DmpClick setCampaign_id(Set<Integer> campaign_id) {
    this.campaign_id = campaign_id;
    return this;
  }

  public void unsetCampaign_id() {
    this.campaign_id = null;
  }

  /** Returns true if field campaign_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCampaign_id() {
    return this.campaign_id != null;
  }

  public void setCampaign_idIsSet(boolean value) {
    if (!value) {
      this.campaign_id = null;
    }
  }

  public int getAd_idSize() {
    return (this.ad_id == null) ? 0 : this.ad_id.size();
  }

  public java.util.Iterator<Integer> getAd_idIterator() {
    return (this.ad_id == null) ? null : this.ad_id.iterator();
  }

  public void addToAd_id(int elem) {
    if (this.ad_id == null) {
      this.ad_id = new HashSet<Integer>();
    }
    this.ad_id.add(elem);
  }

  public Set<Integer> getAd_id() {
    return this.ad_id;
  }

  public DmpClick setAd_id(Set<Integer> ad_id) {
    this.ad_id = ad_id;
    return this;
  }

  public void unsetAd_id() {
    this.ad_id = null;
  }

  /** Returns true if field ad_id is set (has been assigned a value) and false otherwise */
  public boolean isSetAd_id() {
    return this.ad_id != null;
  }

  public void setAd_idIsSet(boolean value) {
    if (!value) {
      this.ad_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADV_INC_ID:
      if (value == null) {
        unsetAdv_inc_id();
      } else {
        setAdv_inc_id((Set<Integer>)value);
      }
      break;

    case CAMPAIGN_ID:
      if (value == null) {
        unsetCampaign_id();
      } else {
        setCampaign_id((Set<Integer>)value);
      }
      break;

    case AD_ID:
      if (value == null) {
        unsetAd_id();
      } else {
        setAd_id((Set<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADV_INC_ID:
      return getAdv_inc_id();

    case CAMPAIGN_ID:
      return getCampaign_id();

    case AD_ID:
      return getAd_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADV_INC_ID:
      return isSetAdv_inc_id();
    case CAMPAIGN_ID:
      return isSetCampaign_id();
    case AD_ID:
      return isSetAd_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DmpClick)
      return this.equals((DmpClick)that);
    return false;
  }

  public boolean equals(DmpClick that) {
    if (that == null)
      return false;

    boolean this_present_adv_inc_id = true && this.isSetAdv_inc_id();
    boolean that_present_adv_inc_id = true && that.isSetAdv_inc_id();
    if (this_present_adv_inc_id || that_present_adv_inc_id) {
      if (!(this_present_adv_inc_id && that_present_adv_inc_id))
        return false;
      if (!this.adv_inc_id.equals(that.adv_inc_id))
        return false;
    }

    boolean this_present_campaign_id = true && this.isSetCampaign_id();
    boolean that_present_campaign_id = true && that.isSetCampaign_id();
    if (this_present_campaign_id || that_present_campaign_id) {
      if (!(this_present_campaign_id && that_present_campaign_id))
        return false;
      if (!this.campaign_id.equals(that.campaign_id))
        return false;
    }

    boolean this_present_ad_id = true && this.isSetAd_id();
    boolean that_present_ad_id = true && that.isSetAd_id();
    if (this_present_ad_id || that_present_ad_id) {
      if (!(this_present_ad_id && that_present_ad_id))
        return false;
      if (!this.ad_id.equals(that.ad_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_adv_inc_id = true && (isSetAdv_inc_id());
    builder.append(present_adv_inc_id);
    if (present_adv_inc_id)
      builder.append(adv_inc_id);

    boolean present_campaign_id = true && (isSetCampaign_id());
    builder.append(present_campaign_id);
    if (present_campaign_id)
      builder.append(campaign_id);

    boolean present_ad_id = true && (isSetAd_id());
    builder.append(present_ad_id);
    if (present_ad_id)
      builder.append(ad_id);

    return builder.toHashCode();
  }

  public int compareTo(DmpClick other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DmpClick typedOther = (DmpClick)other;

    lastComparison = Boolean.valueOf(isSetAdv_inc_id()).compareTo(typedOther.isSetAdv_inc_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdv_inc_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adv_inc_id, typedOther.adv_inc_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCampaign_id()).compareTo(typedOther.isSetCampaign_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCampaign_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.campaign_id, typedOther.campaign_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAd_id()).compareTo(typedOther.isSetAd_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAd_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ad_id, typedOther.ad_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DmpClick(");
    boolean first = true;

    if (isSetAdv_inc_id()) {
      sb.append("adv_inc_id:");
      if (this.adv_inc_id == null) {
        sb.append("null");
      } else {
        sb.append(this.adv_inc_id);
      }
      first = false;
    }
    if (isSetCampaign_id()) {
      if (!first) sb.append(", ");
      sb.append("campaign_id:");
      if (this.campaign_id == null) {
        sb.append("null");
      } else {
        sb.append(this.campaign_id);
      }
      first = false;
    }
    if (isSetAd_id()) {
      if (!first) sb.append(", ");
      sb.append("ad_id:");
      if (this.ad_id == null) {
        sb.append("null");
      } else {
        sb.append(this.ad_id);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DmpClickStandardSchemeFactory implements SchemeFactory {
    public DmpClickStandardScheme getScheme() {
      return new DmpClickStandardScheme();
    }
  }

  private static class DmpClickStandardScheme extends StandardScheme<DmpClick> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DmpClick struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADV_INC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.adv_inc_id = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2; // required
                  _elem2 = iprot.readI32();
                  struct.adv_inc_id.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setAdv_inc_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAMPAIGN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.campaign_id = new HashSet<Integer>(2*_set3.size);
                for (int _i4 = 0; _i4 < _set3.size; ++_i4)
                {
                  int _elem5; // required
                  _elem5 = iprot.readI32();
                  struct.campaign_id.add(_elem5);
                }
                iprot.readSetEnd();
              }
              struct.setCampaign_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
                struct.ad_id = new HashSet<Integer>(2*_set6.size);
                for (int _i7 = 0; _i7 < _set6.size; ++_i7)
                {
                  int _elem8; // required
                  _elem8 = iprot.readI32();
                  struct.ad_id.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setAd_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DmpClick struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.adv_inc_id != null) {
        if (struct.isSetAdv_inc_id()) {
          oprot.writeFieldBegin(ADV_INC_ID_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.adv_inc_id.size()));
            for (int _iter9 : struct.adv_inc_id)
            {
              oprot.writeI32(_iter9);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.campaign_id != null) {
        if (struct.isSetCampaign_id()) {
          oprot.writeFieldBegin(CAMPAIGN_ID_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.campaign_id.size()));
            for (int _iter10 : struct.campaign_id)
            {
              oprot.writeI32(_iter10);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ad_id != null) {
        if (struct.isSetAd_id()) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.ad_id.size()));
            for (int _iter11 : struct.ad_id)
            {
              oprot.writeI32(_iter11);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DmpClickTupleSchemeFactory implements SchemeFactory {
    public DmpClickTupleScheme getScheme() {
      return new DmpClickTupleScheme();
    }
  }

  private static class DmpClickTupleScheme extends TupleScheme<DmpClick> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DmpClick struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAdv_inc_id()) {
        optionals.set(0);
      }
      if (struct.isSetCampaign_id()) {
        optionals.set(1);
      }
      if (struct.isSetAd_id()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAdv_inc_id()) {
        {
          oprot.writeI32(struct.adv_inc_id.size());
          for (int _iter12 : struct.adv_inc_id)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetCampaign_id()) {
        {
          oprot.writeI32(struct.campaign_id.size());
          for (int _iter13 : struct.campaign_id)
          {
            oprot.writeI32(_iter13);
          }
        }
      }
      if (struct.isSetAd_id()) {
        {
          oprot.writeI32(struct.ad_id.size());
          for (int _iter14 : struct.ad_id)
          {
            oprot.writeI32(_iter14);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DmpClick struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set15 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.adv_inc_id = new HashSet<Integer>(2*_set15.size);
          for (int _i16 = 0; _i16 < _set15.size; ++_i16)
          {
            int _elem17; // required
            _elem17 = iprot.readI32();
            struct.adv_inc_id.add(_elem17);
          }
        }
        struct.setAdv_inc_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set18 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.campaign_id = new HashSet<Integer>(2*_set18.size);
          for (int _i19 = 0; _i19 < _set18.size; ++_i19)
          {
            int _elem20; // required
            _elem20 = iprot.readI32();
            struct.campaign_id.add(_elem20);
          }
        }
        struct.setCampaign_idIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.ad_id = new HashSet<Integer>(2*_set21.size);
          for (int _i22 = 0; _i22 < _set21.size; ++_i22)
          {
            int _elem23; // required
            _elem23 = iprot.readI32();
            struct.ad_id.add(_elem23);
          }
        }
        struct.setAd_idIsSet(true);
      }
    }
  }

}

