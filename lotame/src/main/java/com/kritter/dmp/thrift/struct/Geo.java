/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.dmp.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Geo implements org.apache.thrift.TBase<Geo, Geo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Geo");

  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField LON_FIELD_DESC = new org.apache.thrift.protocol.TField("lon", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField COUNTRYCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countrycode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CARRIER_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("carrier_country", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("carrier", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("place", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField STORE_FIELD_DESC = new org.apache.thrift.protocol.TField("store", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STORE_RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("store_radius", org.apache.thrift.protocol.TType.DOUBLE, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GeoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GeoTupleSchemeFactory());
  }

  public double lat; // optional
  public double lon; // optional
  public int region; // optional
  public int country; // optional
  public int state; // optional
  public int city; // optional
  public String countrycode; // optional
  public int carrier_country; // optional
  public int carrier; // optional
  public int place; // optional
  public int store; // optional
  public double store_radius; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAT((short)1, "lat"),
    LON((short)2, "lon"),
    REGION((short)3, "region"),
    COUNTRY((short)4, "country"),
    STATE((short)5, "state"),
    CITY((short)6, "city"),
    COUNTRYCODE((short)7, "countrycode"),
    CARRIER_COUNTRY((short)8, "carrier_country"),
    CARRIER((short)9, "carrier"),
    PLACE((short)10, "place"),
    STORE((short)11, "store"),
    STORE_RADIUS((short)12, "store_radius");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAT
          return LAT;
        case 2: // LON
          return LON;
        case 3: // REGION
          return REGION;
        case 4: // COUNTRY
          return COUNTRY;
        case 5: // STATE
          return STATE;
        case 6: // CITY
          return CITY;
        case 7: // COUNTRYCODE
          return COUNTRYCODE;
        case 8: // CARRIER_COUNTRY
          return CARRIER_COUNTRY;
        case 9: // CARRIER
          return CARRIER;
        case 10: // PLACE
          return PLACE;
        case 11: // STORE
          return STORE;
        case 12: // STORE_RADIUS
          return STORE_RADIUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAT_ISSET_ID = 0;
  private static final int __LON_ISSET_ID = 1;
  private static final int __REGION_ISSET_ID = 2;
  private static final int __COUNTRY_ISSET_ID = 3;
  private static final int __STATE_ISSET_ID = 4;
  private static final int __CITY_ISSET_ID = 5;
  private static final int __CARRIER_COUNTRY_ISSET_ID = 6;
  private static final int __CARRIER_ISSET_ID = 7;
  private static final int __PLACE_ISSET_ID = 8;
  private static final int __STORE_ISSET_ID = 9;
  private static final int __STORE_RADIUS_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LAT,_Fields.LON,_Fields.REGION,_Fields.COUNTRY,_Fields.STATE,_Fields.CITY,_Fields.COUNTRYCODE,_Fields.CARRIER_COUNTRY,_Fields.CARRIER,_Fields.PLACE,_Fields.STORE,_Fields.STORE_RADIUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LON, new org.apache.thrift.meta_data.FieldMetaData("lon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTRYCODE, new org.apache.thrift.meta_data.FieldMetaData("countrycode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARRIER_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("carrier_country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARRIER, new org.apache.thrift.meta_data.FieldMetaData("carrier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLACE, new org.apache.thrift.meta_data.FieldMetaData("place", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STORE, new org.apache.thrift.meta_data.FieldMetaData("store", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STORE_RADIUS, new org.apache.thrift.meta_data.FieldMetaData("store_radius", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Geo.class, metaDataMap);
  }

  public Geo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Geo(Geo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lat = other.lat;
    this.lon = other.lon;
    this.region = other.region;
    this.country = other.country;
    this.state = other.state;
    this.city = other.city;
    if (other.isSetCountrycode()) {
      this.countrycode = other.countrycode;
    }
    this.carrier_country = other.carrier_country;
    this.carrier = other.carrier;
    this.place = other.place;
    this.store = other.store;
    this.store_radius = other.store_radius;
  }

  public Geo deepCopy() {
    return new Geo(this);
  }

  @Override
  public void clear() {
    setLatIsSet(false);
    this.lat = 0.0;
    setLonIsSet(false);
    this.lon = 0.0;
    setRegionIsSet(false);
    this.region = 0;
    setCountryIsSet(false);
    this.country = 0;
    setStateIsSet(false);
    this.state = 0;
    setCityIsSet(false);
    this.city = 0;
    this.countrycode = null;
    setCarrier_countryIsSet(false);
    this.carrier_country = 0;
    setCarrierIsSet(false);
    this.carrier = 0;
    setPlaceIsSet(false);
    this.place = 0;
    setStoreIsSet(false);
    this.store = 0;
    setStore_radiusIsSet(false);
    this.store_radius = 0.0;
  }

  public double getLat() {
    return this.lat;
  }

  public Geo setLat(double lat) {
    this.lat = lat;
    setLatIsSet(true);
    return this;
  }

  public void unsetLat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  public void setLatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
  }

  public double getLon() {
    return this.lon;
  }

  public Geo setLon(double lon) {
    this.lon = lon;
    setLonIsSet(true);
    return this;
  }

  public void unsetLon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LON_ISSET_ID);
  }

  /** Returns true if field lon is set (has been assigned a value) and false otherwise */
  public boolean isSetLon() {
    return EncodingUtils.testBit(__isset_bitfield, __LON_ISSET_ID);
  }

  public void setLonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LON_ISSET_ID, value);
  }

  public int getRegion() {
    return this.region;
  }

  public Geo setRegion(int region) {
    this.region = region;
    setRegionIsSet(true);
    return this;
  }

  public void unsetRegion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGION_ISSET_ID);
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return EncodingUtils.testBit(__isset_bitfield, __REGION_ISSET_ID);
  }

  public void setRegionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGION_ISSET_ID, value);
  }

  public int getCountry() {
    return this.country;
  }

  public Geo setCountry(int country) {
    this.country = country;
    setCountryIsSet(true);
    return this;
  }

  public void unsetCountry() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRY_ISSET_ID);
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTRY_ISSET_ID);
  }

  public void setCountryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRY_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public Geo setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getCity() {
    return this.city;
  }

  public Geo setCity(int city) {
    this.city = city;
    setCityIsSet(true);
    return this;
  }

  public void unsetCity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITY_ISSET_ID);
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return EncodingUtils.testBit(__isset_bitfield, __CITY_ISSET_ID);
  }

  public void setCityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITY_ISSET_ID, value);
  }

  public String getCountrycode() {
    return this.countrycode;
  }

  public Geo setCountrycode(String countrycode) {
    this.countrycode = countrycode;
    return this;
  }

  public void unsetCountrycode() {
    this.countrycode = null;
  }

  /** Returns true if field countrycode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountrycode() {
    return this.countrycode != null;
  }

  public void setCountrycodeIsSet(boolean value) {
    if (!value) {
      this.countrycode = null;
    }
  }

  public int getCarrier_country() {
    return this.carrier_country;
  }

  public Geo setCarrier_country(int carrier_country) {
    this.carrier_country = carrier_country;
    setCarrier_countryIsSet(true);
    return this;
  }

  public void unsetCarrier_country() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARRIER_COUNTRY_ISSET_ID);
  }

  /** Returns true if field carrier_country is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrier_country() {
    return EncodingUtils.testBit(__isset_bitfield, __CARRIER_COUNTRY_ISSET_ID);
  }

  public void setCarrier_countryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARRIER_COUNTRY_ISSET_ID, value);
  }

  public int getCarrier() {
    return this.carrier;
  }

  public Geo setCarrier(int carrier) {
    this.carrier = carrier;
    setCarrierIsSet(true);
    return this;
  }

  public void unsetCarrier() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARRIER_ISSET_ID);
  }

  /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrier() {
    return EncodingUtils.testBit(__isset_bitfield, __CARRIER_ISSET_ID);
  }

  public void setCarrierIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARRIER_ISSET_ID, value);
  }

  public int getPlace() {
    return this.place;
  }

  public Geo setPlace(int place) {
    this.place = place;
    setPlaceIsSet(true);
    return this;
  }

  public void unsetPlace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLACE_ISSET_ID);
  }

  /** Returns true if field place is set (has been assigned a value) and false otherwise */
  public boolean isSetPlace() {
    return EncodingUtils.testBit(__isset_bitfield, __PLACE_ISSET_ID);
  }

  public void setPlaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLACE_ISSET_ID, value);
  }

  public int getStore() {
    return this.store;
  }

  public Geo setStore(int store) {
    this.store = store;
    setStoreIsSet(true);
    return this;
  }

  public void unsetStore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORE_ISSET_ID);
  }

  /** Returns true if field store is set (has been assigned a value) and false otherwise */
  public boolean isSetStore() {
    return EncodingUtils.testBit(__isset_bitfield, __STORE_ISSET_ID);
  }

  public void setStoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORE_ISSET_ID, value);
  }

  public double getStore_radius() {
    return this.store_radius;
  }

  public Geo setStore_radius(double store_radius) {
    this.store_radius = store_radius;
    setStore_radiusIsSet(true);
    return this;
  }

  public void unsetStore_radius() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STORE_RADIUS_ISSET_ID);
  }

  /** Returns true if field store_radius is set (has been assigned a value) and false otherwise */
  public boolean isSetStore_radius() {
    return EncodingUtils.testBit(__isset_bitfield, __STORE_RADIUS_ISSET_ID);
  }

  public void setStore_radiusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STORE_RADIUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((Double)value);
      }
      break;

    case LON:
      if (value == null) {
        unsetLon();
      } else {
        setLon((Double)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((Integer)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((Integer)value);
      }
      break;

    case COUNTRYCODE:
      if (value == null) {
        unsetCountrycode();
      } else {
        setCountrycode((String)value);
      }
      break;

    case CARRIER_COUNTRY:
      if (value == null) {
        unsetCarrier_country();
      } else {
        setCarrier_country((Integer)value);
      }
      break;

    case CARRIER:
      if (value == null) {
        unsetCarrier();
      } else {
        setCarrier((Integer)value);
      }
      break;

    case PLACE:
      if (value == null) {
        unsetPlace();
      } else {
        setPlace((Integer)value);
      }
      break;

    case STORE:
      if (value == null) {
        unsetStore();
      } else {
        setStore((Integer)value);
      }
      break;

    case STORE_RADIUS:
      if (value == null) {
        unsetStore_radius();
      } else {
        setStore_radius((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAT:
      return Double.valueOf(getLat());

    case LON:
      return Double.valueOf(getLon());

    case REGION:
      return Integer.valueOf(getRegion());

    case COUNTRY:
      return Integer.valueOf(getCountry());

    case STATE:
      return Integer.valueOf(getState());

    case CITY:
      return Integer.valueOf(getCity());

    case COUNTRYCODE:
      return getCountrycode();

    case CARRIER_COUNTRY:
      return Integer.valueOf(getCarrier_country());

    case CARRIER:
      return Integer.valueOf(getCarrier());

    case PLACE:
      return Integer.valueOf(getPlace());

    case STORE:
      return Integer.valueOf(getStore());

    case STORE_RADIUS:
      return Double.valueOf(getStore_radius());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAT:
      return isSetLat();
    case LON:
      return isSetLon();
    case REGION:
      return isSetRegion();
    case COUNTRY:
      return isSetCountry();
    case STATE:
      return isSetState();
    case CITY:
      return isSetCity();
    case COUNTRYCODE:
      return isSetCountrycode();
    case CARRIER_COUNTRY:
      return isSetCarrier_country();
    case CARRIER:
      return isSetCarrier();
    case PLACE:
      return isSetPlace();
    case STORE:
      return isSetStore();
    case STORE_RADIUS:
      return isSetStore_radius();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Geo)
      return this.equals((Geo)that);
    return false;
  }

  public boolean equals(Geo that) {
    if (that == null)
      return false;

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (this.lat != that.lat)
        return false;
    }

    boolean this_present_lon = true && this.isSetLon();
    boolean that_present_lon = true && that.isSetLon();
    if (this_present_lon || that_present_lon) {
      if (!(this_present_lon && that_present_lon))
        return false;
      if (this.lon != that.lon)
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (this.region != that.region)
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (this.country != that.country)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (this.city != that.city)
        return false;
    }

    boolean this_present_countrycode = true && this.isSetCountrycode();
    boolean that_present_countrycode = true && that.isSetCountrycode();
    if (this_present_countrycode || that_present_countrycode) {
      if (!(this_present_countrycode && that_present_countrycode))
        return false;
      if (!this.countrycode.equals(that.countrycode))
        return false;
    }

    boolean this_present_carrier_country = true && this.isSetCarrier_country();
    boolean that_present_carrier_country = true && that.isSetCarrier_country();
    if (this_present_carrier_country || that_present_carrier_country) {
      if (!(this_present_carrier_country && that_present_carrier_country))
        return false;
      if (this.carrier_country != that.carrier_country)
        return false;
    }

    boolean this_present_carrier = true && this.isSetCarrier();
    boolean that_present_carrier = true && that.isSetCarrier();
    if (this_present_carrier || that_present_carrier) {
      if (!(this_present_carrier && that_present_carrier))
        return false;
      if (this.carrier != that.carrier)
        return false;
    }

    boolean this_present_place = true && this.isSetPlace();
    boolean that_present_place = true && that.isSetPlace();
    if (this_present_place || that_present_place) {
      if (!(this_present_place && that_present_place))
        return false;
      if (this.place != that.place)
        return false;
    }

    boolean this_present_store = true && this.isSetStore();
    boolean that_present_store = true && that.isSetStore();
    if (this_present_store || that_present_store) {
      if (!(this_present_store && that_present_store))
        return false;
      if (this.store != that.store)
        return false;
    }

    boolean this_present_store_radius = true && this.isSetStore_radius();
    boolean that_present_store_radius = true && that.isSetStore_radius();
    if (this_present_store_radius || that_present_store_radius) {
      if (!(this_present_store_radius && that_present_store_radius))
        return false;
      if (this.store_radius != that.store_radius)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_lat = true && (isSetLat());
    builder.append(present_lat);
    if (present_lat)
      builder.append(lat);

    boolean present_lon = true && (isSetLon());
    builder.append(present_lon);
    if (present_lon)
      builder.append(lon);

    boolean present_region = true && (isSetRegion());
    builder.append(present_region);
    if (present_region)
      builder.append(region);

    boolean present_country = true && (isSetCountry());
    builder.append(present_country);
    if (present_country)
      builder.append(country);

    boolean present_state = true && (isSetState());
    builder.append(present_state);
    if (present_state)
      builder.append(state);

    boolean present_city = true && (isSetCity());
    builder.append(present_city);
    if (present_city)
      builder.append(city);

    boolean present_countrycode = true && (isSetCountrycode());
    builder.append(present_countrycode);
    if (present_countrycode)
      builder.append(countrycode);

    boolean present_carrier_country = true && (isSetCarrier_country());
    builder.append(present_carrier_country);
    if (present_carrier_country)
      builder.append(carrier_country);

    boolean present_carrier = true && (isSetCarrier());
    builder.append(present_carrier);
    if (present_carrier)
      builder.append(carrier);

    boolean present_place = true && (isSetPlace());
    builder.append(present_place);
    if (present_place)
      builder.append(place);

    boolean present_store = true && (isSetStore());
    builder.append(present_store);
    if (present_store)
      builder.append(store);

    boolean present_store_radius = true && (isSetStore_radius());
    builder.append(present_store_radius);
    if (present_store_radius)
      builder.append(store_radius);

    return builder.toHashCode();
  }

  public int compareTo(Geo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Geo typedOther = (Geo)other;

    lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLon()).compareTo(typedOther.isSetLon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lon, typedOther.lon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegion()).compareTo(typedOther.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, typedOther.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(typedOther.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, typedOther.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(typedOther.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, typedOther.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(typedOther.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, typedOther.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountrycode()).compareTo(typedOther.isSetCountrycode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountrycode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countrycode, typedOther.countrycode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarrier_country()).compareTo(typedOther.isSetCarrier_country());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrier_country()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrier_country, typedOther.carrier_country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarrier()).compareTo(typedOther.isSetCarrier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrier, typedOther.carrier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlace()).compareTo(typedOther.isSetPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.place, typedOther.place);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStore()).compareTo(typedOther.isSetStore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.store, typedOther.store);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStore_radius()).compareTo(typedOther.isSetStore_radius());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStore_radius()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.store_radius, typedOther.store_radius);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Geo(");
    boolean first = true;

    if (isSetLat()) {
      sb.append("lat:");
      sb.append(this.lat);
      first = false;
    }
    if (isSetLon()) {
      if (!first) sb.append(", ");
      sb.append("lon:");
      sb.append(this.lon);
      first = false;
    }
    if (isSetRegion()) {
      if (!first) sb.append(", ");
      sb.append("region:");
      sb.append(this.region);
      first = false;
    }
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      sb.append(this.country);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      sb.append(this.city);
      first = false;
    }
    if (isSetCountrycode()) {
      if (!first) sb.append(", ");
      sb.append("countrycode:");
      if (this.countrycode == null) {
        sb.append("null");
      } else {
        sb.append(this.countrycode);
      }
      first = false;
    }
    if (isSetCarrier_country()) {
      if (!first) sb.append(", ");
      sb.append("carrier_country:");
      sb.append(this.carrier_country);
      first = false;
    }
    if (isSetCarrier()) {
      if (!first) sb.append(", ");
      sb.append("carrier:");
      sb.append(this.carrier);
      first = false;
    }
    if (isSetPlace()) {
      if (!first) sb.append(", ");
      sb.append("place:");
      sb.append(this.place);
      first = false;
    }
    if (isSetStore()) {
      if (!first) sb.append(", ");
      sb.append("store:");
      sb.append(this.store);
      first = false;
    }
    if (isSetStore_radius()) {
      if (!first) sb.append(", ");
      sb.append("store_radius:");
      sb.append(this.store_radius);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GeoStandardSchemeFactory implements SchemeFactory {
    public GeoStandardScheme getScheme() {
      return new GeoStandardScheme();
    }
  }

  private static class GeoStandardScheme extends StandardScheme<Geo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Geo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lat = iprot.readDouble();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LON
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lon = iprot.readDouble();
              struct.setLonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.region = iprot.readI32();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.country = iprot.readI32();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.city = iprot.readI32();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COUNTRYCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countrycode = iprot.readString();
              struct.setCountrycodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CARRIER_COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carrier_country = iprot.readI32();
              struct.setCarrier_countryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CARRIER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carrier = iprot.readI32();
              struct.setCarrierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.place = iprot.readI32();
              struct.setPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.store = iprot.readI32();
              struct.setStoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STORE_RADIUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.store_radius = iprot.readDouble();
              struct.setStore_radiusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Geo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLat()) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeDouble(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLon()) {
        oprot.writeFieldBegin(LON_FIELD_DESC);
        oprot.writeDouble(struct.lon);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRegion()) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeI32(struct.region);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCountry()) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeI32(struct.country);
        oprot.writeFieldEnd();
      }
      if (struct.isSetState()) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCity()) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeI32(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.countrycode != null) {
        if (struct.isSetCountrycode()) {
          oprot.writeFieldBegin(COUNTRYCODE_FIELD_DESC);
          oprot.writeString(struct.countrycode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCarrier_country()) {
        oprot.writeFieldBegin(CARRIER_COUNTRY_FIELD_DESC);
        oprot.writeI32(struct.carrier_country);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCarrier()) {
        oprot.writeFieldBegin(CARRIER_FIELD_DESC);
        oprot.writeI32(struct.carrier);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPlace()) {
        oprot.writeFieldBegin(PLACE_FIELD_DESC);
        oprot.writeI32(struct.place);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStore()) {
        oprot.writeFieldBegin(STORE_FIELD_DESC);
        oprot.writeI32(struct.store);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStore_radius()) {
        oprot.writeFieldBegin(STORE_RADIUS_FIELD_DESC);
        oprot.writeDouble(struct.store_radius);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GeoTupleSchemeFactory implements SchemeFactory {
    public GeoTupleScheme getScheme() {
      return new GeoTupleScheme();
    }
  }

  private static class GeoTupleScheme extends TupleScheme<Geo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Geo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLat()) {
        optionals.set(0);
      }
      if (struct.isSetLon()) {
        optionals.set(1);
      }
      if (struct.isSetRegion()) {
        optionals.set(2);
      }
      if (struct.isSetCountry()) {
        optionals.set(3);
      }
      if (struct.isSetState()) {
        optionals.set(4);
      }
      if (struct.isSetCity()) {
        optionals.set(5);
      }
      if (struct.isSetCountrycode()) {
        optionals.set(6);
      }
      if (struct.isSetCarrier_country()) {
        optionals.set(7);
      }
      if (struct.isSetCarrier()) {
        optionals.set(8);
      }
      if (struct.isSetPlace()) {
        optionals.set(9);
      }
      if (struct.isSetStore()) {
        optionals.set(10);
      }
      if (struct.isSetStore_radius()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetLat()) {
        oprot.writeDouble(struct.lat);
      }
      if (struct.isSetLon()) {
        oprot.writeDouble(struct.lon);
      }
      if (struct.isSetRegion()) {
        oprot.writeI32(struct.region);
      }
      if (struct.isSetCountry()) {
        oprot.writeI32(struct.country);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetCity()) {
        oprot.writeI32(struct.city);
      }
      if (struct.isSetCountrycode()) {
        oprot.writeString(struct.countrycode);
      }
      if (struct.isSetCarrier_country()) {
        oprot.writeI32(struct.carrier_country);
      }
      if (struct.isSetCarrier()) {
        oprot.writeI32(struct.carrier);
      }
      if (struct.isSetPlace()) {
        oprot.writeI32(struct.place);
      }
      if (struct.isSetStore()) {
        oprot.writeI32(struct.store);
      }
      if (struct.isSetStore_radius()) {
        oprot.writeDouble(struct.store_radius);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Geo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.lat = iprot.readDouble();
        struct.setLatIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lon = iprot.readDouble();
        struct.setLonIsSet(true);
      }
      if (incoming.get(2)) {
        struct.region = iprot.readI32();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.country = iprot.readI32();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.city = iprot.readI32();
        struct.setCityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.countrycode = iprot.readString();
        struct.setCountrycodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.carrier_country = iprot.readI32();
        struct.setCarrier_countryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.carrier = iprot.readI32();
        struct.setCarrierIsSet(true);
      }
      if (incoming.get(9)) {
        struct.place = iprot.readI32();
        struct.setPlaceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.store = iprot.readI32();
        struct.setStoreIsSet(true);
      }
      if (incoming.get(11)) {
        struct.store_radius = iprot.readDouble();
        struct.setStore_radiusIsSet(true);
      }
    }
  }

}

