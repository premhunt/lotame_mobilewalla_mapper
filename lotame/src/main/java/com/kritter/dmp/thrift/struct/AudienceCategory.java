/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.audience.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AudienceCategory implements org.apache.thrift.TBase<AudienceCategory, AudienceCategory._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AudienceCategory");

  private static final org.apache.thrift.protocol.TField CAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("catId", org.apache.thrift.protocol.TType.SET, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AudienceCategoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AudienceCategoryTupleSchemeFactory());
  }

  public Set<Integer> catId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAT_ID((short)1, "catId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CAT_ID
          return CAT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CAT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAT_ID, new org.apache.thrift.meta_data.FieldMetaData("catId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AudienceCategory.class, metaDataMap);
  }

  public AudienceCategory() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AudienceCategory(AudienceCategory other) {
    if (other.isSetCatId()) {
      Set<Integer> __this__catId = new HashSet<Integer>();
      for (Integer other_element : other.catId) {
        __this__catId.add(other_element);
      }
      this.catId = __this__catId;
    }
  }

  public AudienceCategory deepCopy() {
    return new AudienceCategory(this);
  }

  @Override
  public void clear() {
    this.catId = null;
  }

  public int getCatIdSize() {
    return (this.catId == null) ? 0 : this.catId.size();
  }

  public java.util.Iterator<Integer> getCatIdIterator() {
    return (this.catId == null) ? null : this.catId.iterator();
  }

  public void addToCatId(int elem) {
    if (this.catId == null) {
      this.catId = new HashSet<Integer>();
    }
    this.catId.add(elem);
  }

  public Set<Integer> getCatId() {
    return this.catId;
  }

  public AudienceCategory setCatId(Set<Integer> catId) {
    this.catId = catId;
    return this;
  }

  public void unsetCatId() {
    this.catId = null;
  }

  /** Returns true if field catId is set (has been assigned a value) and false otherwise */
  public boolean isSetCatId() {
    return this.catId != null;
  }

  public void setCatIdIsSet(boolean value) {
    if (!value) {
      this.catId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAT_ID:
      if (value == null) {
        unsetCatId();
      } else {
        setCatId((Set<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAT_ID:
      return getCatId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAT_ID:
      return isSetCatId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AudienceCategory)
      return this.equals((AudienceCategory)that);
    return false;
  }

  public boolean equals(AudienceCategory that) {
    if (that == null)
      return false;

    boolean this_present_catId = true && this.isSetCatId();
    boolean that_present_catId = true && that.isSetCatId();
    if (this_present_catId || that_present_catId) {
      if (!(this_present_catId && that_present_catId))
        return false;
      if (!this.catId.equals(that.catId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_catId = true && (isSetCatId());
    builder.append(present_catId);
    if (present_catId)
      builder.append(catId);

    return builder.toHashCode();
  }

  public int compareTo(AudienceCategory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AudienceCategory typedOther = (AudienceCategory)other;

    lastComparison = Boolean.valueOf(isSetCatId()).compareTo(typedOther.isSetCatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catId, typedOther.catId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AudienceCategory(");
    boolean first = true;

    if (isSetCatId()) {
      sb.append("catId:");
      if (this.catId == null) {
        sb.append("null");
      } else {
        sb.append(this.catId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AudienceCategoryStandardSchemeFactory implements SchemeFactory {
    public AudienceCategoryStandardScheme getScheme() {
      return new AudienceCategoryStandardScheme();
    }
  }

  private static class AudienceCategoryStandardScheme extends StandardScheme<AudienceCategory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AudienceCategory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.catId = new HashSet<Integer>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  int _elem2; // required
                  _elem2 = iprot.readI32();
                  struct.catId.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setCatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AudienceCategory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.catId != null) {
        if (struct.isSetCatId()) {
          oprot.writeFieldBegin(CAT_ID_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.catId.size()));
            for (int _iter3 : struct.catId)
            {
              oprot.writeI32(_iter3);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AudienceCategoryTupleSchemeFactory implements SchemeFactory {
    public AudienceCategoryTupleScheme getScheme() {
      return new AudienceCategoryTupleScheme();
    }
  }

  private static class AudienceCategoryTupleScheme extends TupleScheme<AudienceCategory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AudienceCategory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCatId()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCatId()) {
        {
          oprot.writeI32(struct.catId.size());
          for (int _iter4 : struct.catId)
          {
            oprot.writeI32(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AudienceCategory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.catId = new HashSet<Integer>(2*_set5.size);
          for (int _i6 = 0; _i6 < _set5.size; ++_i6)
          {
            int _elem7; // required
            _elem7 = iprot.readI32();
            struct.catId.add(_elem7);
          }
        }
        struct.setCatIdIsSet(true);
      }
    }
  }

}

