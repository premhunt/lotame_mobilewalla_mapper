/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kritter.user.thrift.struct;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LifetimeDemandHistory implements org.apache.thrift.TBase<LifetimeDemandHistory, LifetimeDemandHistory._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LifetimeDemandHistory");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField DEMAND_EVENT_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("demandEventCount", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LifetimeDemandHistoryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LifetimeDemandHistoryTupleSchemeFactory());
  }

  public byte version; // required
  public Map<Integer,Long> demandEventCount; // optional
  /**
   * 
   * @see EventType
   */
  public EventType eventType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    DEMAND_EVENT_COUNT((short)2, "demandEventCount"),
    /**
     * 
     * @see EventType
     */
    EVENT_TYPE((short)3, "eventType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // DEMAND_EVENT_COUNT
          return DEMAND_EVENT_COUNT;
        case 3: // EVENT_TYPE
          return EVENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DEMAND_EVENT_COUNT,_Fields.EVENT_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DEMAND_EVENT_COUNT, new org.apache.thrift.meta_data.FieldMetaData("demandEventCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EventType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LifetimeDemandHistory.class, metaDataMap);
  }

  public LifetimeDemandHistory() {
    this.version = (byte)1;

  }

  public LifetimeDemandHistory(
    byte version)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LifetimeDemandHistory(LifetimeDemandHistory other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    if (other.isSetDemandEventCount()) {
      Map<Integer,Long> __this__demandEventCount = new HashMap<Integer,Long>();
      for (Map.Entry<Integer, Long> other_element : other.demandEventCount.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        Integer __this__demandEventCount_copy_key = other_element_key;

        Long __this__demandEventCount_copy_value = other_element_value;

        __this__demandEventCount.put(__this__demandEventCount_copy_key, __this__demandEventCount_copy_value);
      }
      this.demandEventCount = __this__demandEventCount;
    }
    if (other.isSetEventType()) {
      this.eventType = other.eventType;
    }
  }

  public LifetimeDemandHistory deepCopy() {
    return new LifetimeDemandHistory(this);
  }

  @Override
  public void clear() {
    this.version = (byte)1;

    this.demandEventCount = null;
    this.eventType = null;
  }

  public byte getVersion() {
    return this.version;
  }

  public LifetimeDemandHistory setVersion(byte version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getDemandEventCountSize() {
    return (this.demandEventCount == null) ? 0 : this.demandEventCount.size();
  }

  public void putToDemandEventCount(int key, long val) {
    if (this.demandEventCount == null) {
      this.demandEventCount = new HashMap<Integer,Long>();
    }
    this.demandEventCount.put(key, val);
  }

  public Map<Integer,Long> getDemandEventCount() {
    return this.demandEventCount;
  }

  public LifetimeDemandHistory setDemandEventCount(Map<Integer,Long> demandEventCount) {
    this.demandEventCount = demandEventCount;
    return this;
  }

  public void unsetDemandEventCount() {
    this.demandEventCount = null;
  }

  /** Returns true if field demandEventCount is set (has been assigned a value) and false otherwise */
  public boolean isSetDemandEventCount() {
    return this.demandEventCount != null;
  }

  public void setDemandEventCountIsSet(boolean value) {
    if (!value) {
      this.demandEventCount = null;
    }
  }

  /**
   * 
   * @see EventType
   */
  public EventType getEventType() {
    return this.eventType;
  }

  /**
   * 
   * @see EventType
   */
  public LifetimeDemandHistory setEventType(EventType eventType) {
    this.eventType = eventType;
    return this;
  }

  public void unsetEventType() {
    this.eventType = null;
  }

  /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
  public boolean isSetEventType() {
    return this.eventType != null;
  }

  public void setEventTypeIsSet(boolean value) {
    if (!value) {
      this.eventType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Byte)value);
      }
      break;

    case DEMAND_EVENT_COUNT:
      if (value == null) {
        unsetDemandEventCount();
      } else {
        setDemandEventCount((Map<Integer,Long>)value);
      }
      break;

    case EVENT_TYPE:
      if (value == null) {
        unsetEventType();
      } else {
        setEventType((EventType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Byte.valueOf(getVersion());

    case DEMAND_EVENT_COUNT:
      return getDemandEventCount();

    case EVENT_TYPE:
      return getEventType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case DEMAND_EVENT_COUNT:
      return isSetDemandEventCount();
    case EVENT_TYPE:
      return isSetEventType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LifetimeDemandHistory)
      return this.equals((LifetimeDemandHistory)that);
    return false;
  }

  public boolean equals(LifetimeDemandHistory that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_demandEventCount = true && this.isSetDemandEventCount();
    boolean that_present_demandEventCount = true && that.isSetDemandEventCount();
    if (this_present_demandEventCount || that_present_demandEventCount) {
      if (!(this_present_demandEventCount && that_present_demandEventCount))
        return false;
      if (!this.demandEventCount.equals(that.demandEventCount))
        return false;
    }

    boolean this_present_eventType = true && this.isSetEventType();
    boolean that_present_eventType = true && that.isSetEventType();
    if (this_present_eventType || that_present_eventType) {
      if (!(this_present_eventType && that_present_eventType))
        return false;
      if (!this.eventType.equals(that.eventType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_version = true;
    builder.append(present_version);
    if (present_version)
      builder.append(version);

    boolean present_demandEventCount = true && (isSetDemandEventCount());
    builder.append(present_demandEventCount);
    if (present_demandEventCount)
      builder.append(demandEventCount);

    boolean present_eventType = true && (isSetEventType());
    builder.append(present_eventType);
    if (present_eventType)
      builder.append(eventType.getValue());

    return builder.toHashCode();
  }

  public int compareTo(LifetimeDemandHistory other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LifetimeDemandHistory typedOther = (LifetimeDemandHistory)other;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDemandEventCount()).compareTo(typedOther.isSetDemandEventCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDemandEventCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.demandEventCount, typedOther.demandEventCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventType()).compareTo(typedOther.isSetEventType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, typedOther.eventType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LifetimeDemandHistory(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (isSetDemandEventCount()) {
      if (!first) sb.append(", ");
      sb.append("demandEventCount:");
      if (this.demandEventCount == null) {
        sb.append("null");
      } else {
        sb.append(this.demandEventCount);
      }
      first = false;
    }
    if (isSetEventType()) {
      if (!first) sb.append(", ");
      sb.append("eventType:");
      if (this.eventType == null) {
        sb.append("null");
      } else {
        sb.append(this.eventType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LifetimeDemandHistoryStandardSchemeFactory implements SchemeFactory {
    public LifetimeDemandHistoryStandardScheme getScheme() {
      return new LifetimeDemandHistoryStandardScheme();
    }
  }

  private static class LifetimeDemandHistoryStandardScheme extends StandardScheme<LifetimeDemandHistory> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LifetimeDemandHistory struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.version = iprot.readByte();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEMAND_EVENT_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.demandEventCount = new HashMap<Integer,Long>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  int _key18; // required
                  long _val19; // required
                  _key18 = iprot.readI32();
                  _val19 = iprot.readI64();
                  struct.demandEventCount.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setDemandEventCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventType = EventType.findByValue(iprot.readI32());
              struct.setEventTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LifetimeDemandHistory struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeByte(struct.version);
      oprot.writeFieldEnd();
      if (struct.demandEventCount != null) {
        if (struct.isSetDemandEventCount()) {
          oprot.writeFieldBegin(DEMAND_EVENT_COUNT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, struct.demandEventCount.size()));
            for (Map.Entry<Integer, Long> _iter20 : struct.demandEventCount.entrySet())
            {
              oprot.writeI32(_iter20.getKey());
              oprot.writeI64(_iter20.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.eventType != null) {
        if (struct.isSetEventType()) {
          oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.eventType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LifetimeDemandHistoryTupleSchemeFactory implements SchemeFactory {
    public LifetimeDemandHistoryTupleScheme getScheme() {
      return new LifetimeDemandHistoryTupleScheme();
    }
  }

  private static class LifetimeDemandHistoryTupleScheme extends TupleScheme<LifetimeDemandHistory> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LifetimeDemandHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetDemandEventCount()) {
        optionals.set(1);
      }
      if (struct.isSetEventType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetVersion()) {
        oprot.writeByte(struct.version);
      }
      if (struct.isSetDemandEventCount()) {
        {
          oprot.writeI32(struct.demandEventCount.size());
          for (Map.Entry<Integer, Long> _iter21 : struct.demandEventCount.entrySet())
          {
            oprot.writeI32(_iter21.getKey());
            oprot.writeI64(_iter21.getValue());
          }
        }
      }
      if (struct.isSetEventType()) {
        oprot.writeI32(struct.eventType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LifetimeDemandHistory struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.version = iprot.readByte();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.demandEventCount = new HashMap<Integer,Long>(2*_map22.size);
          for (int _i23 = 0; _i23 < _map22.size; ++_i23)
          {
            int _key24; // required
            long _val25; // required
            _key24 = iprot.readI32();
            _val25 = iprot.readI64();
            struct.demandEventCount.put(_key24, _val25);
          }
        }
        struct.setDemandEventCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.eventType = EventType.findByValue(iprot.readI32());
        struct.setEventTypeIsSet(true);
      }
    }
  }

}

